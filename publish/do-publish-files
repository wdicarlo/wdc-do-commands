#!/usr/bin/env bash

cmd=`basename $0`
store=`echo ~/.do_publish_files`

function usage () {
    echo "Usage: $cmd [options] [-a] <src-files> <dest-folder>"
    echo "            copies <src-files> into <dest-folder>"
    echo "            and store current folder and parameters"
    echo ""
    echo "            -a              just add to the list of publishing entries"
    echo ""
    echo "       $cmd [options]"
    echo "            repeat last command if only one is available"
    echo "            in the current folder, otherwise present a"
    echo "            list of different options."
    echo ""
    echo "       where option may be:"
    echo "            -p              partial publishing"
    echo "            -m              move files"
    echo "            -s              skip existing files"
    echo "            -l              just list source and destination files"
    echo ""
}

function doprocess() {
    cpath=$1
    dest=`echo $2|sed "s#\"##g"|sed "s#/\\$##"`
    srcs=`echo ${@: 3}|sed "s#\"##g"`
    if [ ! -d $dest ]; then
        echo "Missing destination folder: $dest"
        exit
    fi

    echo "$cpath \"$dest\" \"$srcs\"" >> $store
    # filter publish file
    file=`cat $store`;echo  "$file" | sort | uniq  > $store

    if [ $add -eq 1 ]; then
        echo "Added publish record: "
        echo "$cpath \"$dest\" \"$srcs\"" 
        exit
    fi

    # check if all source files are present
    if [ $partial -eq 0 ]; then
        missing=""
        for file in $srcs
        do
            if [ ! -f $file ]; then
                missing+="$file\n"
            fi
        done
        if [ ! "$missing" == "" ]; then
            echo "______________"
            echo "Missing files:"
            echo "--------------"
            echo -e "$missing"
            echo ""
            read -p "Partial publishing? (y/[n]): " ans
            if [ ! "$ans" == "y" ]; then
                echo "Please, make sure all files are ready for publishing."
                exit
            fi
        fi
    fi

    for file in $srcs
    do
        if [ ! -f $file ]; then
            echo "Skipping missing file: $file"
        else
            destfile=`basename $file`
            if [ $show == 0 ]; then
                if [ $move -eq 0 ]; then
                    cmd="cp $file $dest"
                else
                    cmd="mv $file $dest"
                fi
                if [ -f "$dest/$destfile" ]; then
                    if [ $skip -eq 1 ]; then
                        echo "Skipping existing file: $destfile"
                        continue
                    fi
                    cmd+=" # overwriting"
                fi
            else
                # just list file details
                src_show=`ls -lh $file |awk '{ printf "%-4s %-3s %-2s %-5s %-50s", $5, $6, $7, $8, $9}'`
                dst_show=""
                cmd="echo \"$src_show   -->  $dest\""
                if [ -f "$dest/$destfile" ]; then
                    dst_show=`ls -lh $dest/$destfile |awk '{ printf "%-4s %-3s %-2s %-5s %-50s", $5, $6, $7, $8, $9}'`
                    age=""
                    if [ "$file" -nt "$dest/$destfile" ]; then
                        age="newer"
                    else 
                        if [ "$file" -ot "$dest/$destfile" ]; then
                            age="older"
                        fi
                    fi
                    cmd="echo \"$src_show   -->  $dst_show      $age\""
                fi
                eval "$cmd"
                continue
            fi
            echo "> $cmd"
            # copy preserving timestamp
            cp "$file" "$dest/$destfile"
            touch -r "$file" "$dest/$destfile"
            if [ $move -eq 1 ]; then
                rm "$file"
            fi
        fi
    done

}

partial=0
move=0
skip=0
show=0
add=0
while getopts hpmsla flag
do
    case $flag in
        a)
            add=1
            ;;
        l)
            show=1
            ;;
        s)
            skip=1
            ;;
        m)
            move=1
            ;;
        p)
            partial=1
            ;;

        h)
            usage
            exit
            ;;
        ?)
            usage
            exit
            ;;
    esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument


if [ ! -f "$store" ]; then
    dir=`dirname $store`
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
    fi
    touch "$store"

fi

if [ $add -eq 1 ]; then
    if [ $# -lt 2 ]; then
        echo "To add a publishing record it is necessary to specify source and destionation"
        exit
    fi
fi

cpath=`pwd`

# find current path
list=`cat "$store" | xargs -I@ sh -c "echo \"@\"" |grep "$cpath "`

if [ $# == 1 ]; then
    list=`echo "$list"|grep $1`
    shift
fi
if [ $# == 0 ]; then
    if [ "$list" == "" ]; then
        usage
        echo "____________________________________________"
        echo "You must be in one of the following folders:"
        echo "--------------------------------------------"
        cat $store | xargs -I@ sh -c "echo \"@\"" | xargs -I@ sh -c "echo \"@\"" | awk '{ print $1 }'
        exit
    fi
    n=`echo "$list"|wc -l`
    if [ $n -gt 1 ]; then
        echo "_______________________"
        echo "Available alternatives:"
        echo "-----------------------"
        echo "$list"
        #exit
        list=`echo "$list"|head -1`
    fi
    # print available publishing options
    doprocess $list
    exit
fi


dest="${@: -1}" # get last parameter
# store all parameters apart the last one
srcs=""
n=$((${#@} -1 )) 
for i in $(seq 1 $n)
do
    srcs+="${@:$i:1} "
done

list="$cpath \"$dest\" \"$srcs\""
doprocess $list
