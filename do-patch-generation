#!/usr/bin/env bash 

now=`date +%Y%m%d%H%M%S`
cmd=$(basename $0)

function usage() {
    echo "Usage: $cmd [-q] [-x <file-pattern>] [-f] [-o] <folder> <folder> <output>"
    echo "where:"
    echo "       -x <exclude-patt>  : exclude pattern"
    echo "       -f                 : force filename"
    echo "       -o                 : overwrite destination file"
    echo "       -p                 : just print the patch"
    echo "       -q                 : quiet"
}

quiet=0
if [ -t 0 ]; then
    quiet=1
fi
exclude=" --exclude=\".git\" --exclude=\".svn\""
force=0
overwrite=0
print=0
while getopts hx:qfop flag
do
    case $flag in
        p)
            print=1
            ;;
        f)
            force=1
            ;;
        o)
            overwrite=1
            ;;
        q)
            quiet=1
            ;;
        x)
            exclude="$exclude --exclude=\"$OPTARG\" "
            ;;
        h)
            usage
            exit
            ;;
        ?)
            usage
            exit
            ;;
    esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

if [ ! $# -eq 3 ]; then
    usage
    exit
fi

if [ ! -d "$1" ]
then    
    echo "$1 is not a folder"
    exit
fi


if [ ! -d "$2" ]
then
    echo "$2 is not a folder"
    exit
fi

if [ $print -eq 0 ]; then
    if [ $force -eq 0 ]; then
        output="$3-$now.patch"
    else
        output="$3.patch"
    fi

    if [ $overwrite -eq 0 ]; then
        if [ -f "$output" ]; then
            echo "File already exists: $output"
            exit
        fi
    fi

    if [ "$exclude" == "" ]; then
        cmd="diff -rupN $1 $2 > $output"
    else
        cmd="diff $exclude -rupN $1 $2 > $output"
    fi
else
    if [ "$exclude" == "" ]; then
        cmd="diff -rupN $1 $2"
    else
        cmd="diff $exclude -rupN $1 $2"
    fi
fi

if [ $quiet -eq 0 ]; then
    echo "> $cmd"
fi
eval $cmd

