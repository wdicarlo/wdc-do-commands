#!/usr/bin/env bash

#TODO: use only two inout <path/filename> <other-root-path>
app=`basename $0`
function usage() {
    echo "Usage: $app [-d] [-r] [-s] <root1> <root2>"
    echo "       -r             : recursive"
    echo "       -d             : use DirDiff plugin"
    echo "       -s             : just print a summary of differences"
    echo "Usage: $app <root1> <root2> <common-relative-path-to-file>"
    echo "Usage: $app -f <root> <file1> <file2>"
    echo "Usage: $app -p <file> # edit diff of <file> vs <file>.orig and <file>.rej"
    echo "Usage: $app -g <file> # view diff of <file> vs un-staged git changes"
}

function compare() {
    dir1=$(echo "$1" | sed 's#/$##')
    dir2=$(echo "$2" | sed 's#/$##')

    # find common filenames
    for file in $(find "$dir1" -maxdepth 1 -type f | sed "s#${dir1}/##")
    do
      ok=$(find "$dir2" -maxdepth 1 -type f | sed "s#${dir2}/##" | grep "^${file}$" | wc -l)
      cmd="vimdiff --noplugin "
      if [ $ok -gt 0 ]; then
        [ $(diff "${dir1}/${file}" "${dir2}/${file}"|wc -l) -eq 0 ] && echo "Skipping equal file: ${dir2}/${file}" && continue
        cmd="$cmd ${dir1}/${file} ${dir2}/${file}"
        echo "> $cmd"
        read -p "Compare? y/[n]/q > " answer 
        if [ "$answer" == "y" ]; then
          eval "$cmd"
        elif [ "$answer" == "q" ]; then
          exit
        fi
      else
        echo "Skipping missing file: ${dir2}/${file}"
      fi
    done
}

if [ $# == 0 ]; then
    usage
    exit
fi

multinames=0
quiet=0
patchmode=0
recurse=0
summary=0
git=0
dirdiff=0
while getopts qhfprsgd flag
do
    case $flag in

        q)
            quiet=1
#            echo pars is $pars
            ;;
        d)
            dirdiff=1
            ;;
        g)
            git=1
            ;;
        s)
            summary=1
            ;;
        r)
            recurse=1
            ;;
        p)
            patchmode=1
            ;;
        f)
            multinames=1
            ;;
        h)
            usage
            exit
            ;;
        ?)
            usage
            exit
            ;;
    esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

if [ $git -eq 1 ]; then
	if [ $# -ne 1 ]; then
	    usage
	    exit
	fi 
  git difftool -t vimdiff -y "$1"
  exit
fi

if [ $patchmode -eq 1 ]; then
	if [ $# -ne 1 ]; then
	    usage
	    exit
	fi 
	
	if [ ! -f "$1.orig" ]; then
		echo "Missing $1.orig file"
		exit
	fi
	if [ -f "$1.rej" ]; then
		cmd="vim -o $1.rej $1.orig $1 -c \":2,3windo diffthis|:2wincmd k\" < /dev/tty"
	else
		cmd="vimdiff $1 $1.orig"
	fi
	echo "> $cmd"
	eval "$cmd"
	exit
fi

if [ $# -eq 2 ]; then
    path1=$(echo "$1" | sed 's#/$##')
    path2=$(echo "$2" | sed 's#/$##')
    [ ! -d "$path1" ] || [ ! -d "$path2" ] && echo "Wrong paths" && exit

    if [ $summary -eq 1 ]; then
      diff -q -r --exclude=".git"  "$path1" "$path2"
      exit
    fi
    [ $dirdiff -eq 1 ] && vim -c ":DirDiff $path1 $path2" < /dev/tty && exit
    compare "$path1" "$path2"
    if [ $recurse -eq 1 ]; then
      for subdir in $(find "$path1" -type d | sed "s#${path1}##" | sed 's#^/##' | grep -v "\.git" | grep -v "^$")
      do
        [ ! -d "${path2}/${subdir}" ] && echo "Skipping missing path: ${path2} / ${subdir}" && continue
        compare "${path1}/${subdir}" "${path2}/${subdir}" 
      done
    fi
    exit
elif [ $# -ne 3 ]; then
    usage
    exit
fi 

if [ $multinames -eq 0 ]; then
    path1="$1"
    path2="$2"
    shift
    shift
    for file in $@;
    do
        if [ -f $path1/$file ] && [ -f $path2/$file ]; then 
            vimdiff --noplugin $path1/$file $path2/$file
        fi
    done
else
    path=$1
    shift
    cmd="vimdiff --noplugin "
    for file in $@;
    do
        if [ -f $path/$file ]; then
            cmd="$cmd $path/$file"
        fi
    done
    echo "> $cmd"
    eval "$cmd"
fi

