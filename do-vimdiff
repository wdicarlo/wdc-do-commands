#!/usr/bin/env bash

#TODO: use only two inout <path/filename> <other-root-path>
app=`basename $0`
function usage() {
    echo "Usage: $app <root1> <root2> <common-path>"
    echo "Usage: $app -f <root> <file1> <file2>"
    echo "Usage: $app -p <file> # edit diff of <file> vs <file>.orig and <file>.rej"
}

if [ $# == 0 ]; then
    usage
    exit
fi

multinames=0
quiet=0
patchmode=0
while getopts qhfp flag
do
    case $flag in

        q)
            quiet=1
#            echo pars is $pars
            ;;
        p)
            patchmode=1
            ;;
        f)
            multinames=1
            ;;
        h)
            usage
            exit
            ;;
        ?)
            usage
            exit
            ;;
    esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument


if [ $patchmode -eq 1 ]; then
	if [ $# -ne 1 ]; then
	    usage
	    exit
	fi 
	
	if [ ! -f "$1.orig" ]; then
		echo "Missing $1.orig file"
		exit
	fi
	if [ -f "$1.rej" ]; then
		cmd="vim -o $1.rej $1.orig $1 -c \":2,3windo diffthis|:2wincmd k\" < /dev/tty"
	else
		cmd="vimdiff $1 $1.orig"
	fi
	echo "> $cmd"
	eval "$cmd"
	exit
fi

if [ $# -eq 2 ]; then
    path1=$(echo "$1" | sed 's#/$##')
    path2=$(echo "$2" | sed 's#/$##')
    if [ ! -d "$path1" ] || [ ! -d "$path2" ]; then
      usage
      exit
    fi
    # find common filenames
    for file in $(ls -1 "$path1")
    do
      ok=$(ls -1 "$path2" | grep "^${file}$" | wc -l)
      cmd="vimdiff --noplugin "
      if [ $ok -gt 0 ]; then
        [ $(diff "${path1}/${file}" "${path2}/${file}"|wc -l) -eq 0 ] && continue
        cmd="$cmd ${path1}/${file} ${path2}/${file}"
        echo "> $cmd"
        read -p "Compare? y/[n]/q > " answer 
        if [ "$answer" == "y" ]; then
          eval "$cmd"
        elif [ "$answer" == "q" ]; then
          exit
        fi
      fi
    done
    exit
elif [ $# -ne 3 ]; then
    usage
    exit
fi 

if [ $multinames -eq 0 ]; then
    path1="$1"
    path2="$2"
    shift
    shift
    for file in $@;
    do
        if [ -f $path1/$file ] && [ -f $path2/$file ]; then 
            vimdiff --noplugin $path1/$file $path2/$file
        fi
    done
else
    path=$1
    shift
    cmd="vimdiff --noplugin "
    for file in $@;
    do
        if [ -f $path/$file ]; then
            cmd="$cmd $path/$file"
        fi
    done
    echo "> $cmd"
    eval "$cmd"
fi

