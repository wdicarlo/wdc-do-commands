#!/usr/bin/env bash

function echoerr() { printf "%s\n" "$*" >&2; }

# Usage help function
cmd=`basename $0`

function usage() {
  echo "Usage: $cmd [-h] [-l] [-m] [-H <1|2>"
  echo "Report forecast costs (by quarter by default)"
  echo "where:"
  echo "       -h                          : print this help"
  echo "       -l                          : list subscriptions to be considered"
  echo "       -H <1|2>                    : consider first or second half of the year"
  echo "       -m                          : consider current month"
}
function qtr() {
  mon=$(date +'%m')
  y=$(date +'%Y')
  begin=""
  end=""
  if [ $mon -ge 1 -a $mon -le 3 ]; then
       qtr=1
       begin="$y-01-01"
       end="$y-03-31"
  elif [ $mon -ge 4 -a $mon -le 6 ]; then
       qtr=2
       begin="$y-04-01"
       end="$y-06-30"
  elif [ $mon -ge 7 -a $mon -le 9 ]; then
       qtr=3
       begin="$y-07-01"
       end="$y-09-30"
  elif [ $mon -ge 10 -a $mon -le 12 ]; then
       qtr=4
       begin="$y-10-01"
       end="$y-12-31"
  fi
  printf "%02d:%s:%s\n" $qtr $begin $end
}
function hy() {
  y=$(date +'%Y')
  [ "$1" == "" ] && return

  [ $1 -eq 1 ] && begin="$y-01-01" && end="$y-06-30"
  [ $1 -eq 2 ] && begin="$y-07-01" && end="$y-12-31"

  printf "%s:%s:%s\n" "h$1" $begin $end
}

[ "$(which az)" == "" ] && echoerr "Missing az command" && exit
[ $(az account list 2>&1 | grep -c "az login") -eq 1 ] && echo "Error: not logged in" && exit 1 

# Arguments processing
list=0
halfyear=0
month=0
while getopts hlH:m flag
do
  case $flag in
    m)
      month=-1
      ;;
    H)
      halfyear=$OPTARG
      [ $halfyear -ne 1 ] && [ $halfyear -ne 2 ] && halfyear=0
      ;;
    l)
      list=1
      ;;
    h)
      usage
      exit
      ;;
    ?)
      usage
      exit
      ;;
  esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument


[[ $halfyear -ne 0 && $m -ne 0 ]] && echo "Ambiguous time range selection" && usage && exit 

period=$(date +"%m")
week=$(date +"%U")
year=$(date +"%Y")
IFS=':' read -r quarter begin end <<< $(qtr)
drange="$begin:$end"
report=azure_forecast_${year}_q${quarter}_p${period}_w${week}.csv

[ "$AZ_SUBSCRIPTIONS_PATT_IN" == "" ] && AZ_SUBSCRIPTIONS_PATT_IN="^"
[ "$AZ_SUBSCRIPTIONS_PATT_OUT" == "" ] && AZ_SUBSCRIPTIONS_PATT_OUT="^$"
[ $list -eq 1 ] && (./do-az-subscriptions | grep "$AZ_SUBSCRIPTIONS_PATT_IN" | grep -v "$AZ_SUBSCRIPTIONS_PATT_OUT") && exit

[ $(./do-az-subscriptions | grep -v "^$" | wc -l) -eq 0 ] && echoerr "Missing subscriptions. Please run do-az-login" && exit

if [ $halfyear -ne 0 ]; then
  IFS=':' read -r hperiod begin end <<< $(hy $halfyear)
  drange="$begin:$end"
  report=azure_forecast_${year}_${hperiod}_p${period}_w${week}.csv
elif [ $month -ne 0 ]; then
  [ $month -eq -1 ] && month=$((10#$period)) # remove leading 0s
  [[ $month -lt 1 || $month -gt 12 ]] && echo "Wrong period: $month" && exit
  period=$(printf "%02d" $month) # in case we are not referring to current period
  days=$(printf "%02d" $(date -d "$month/1 + 1 month - 1 day" "+%d"))
  begin="${year}-${period}-01"
  end="${year}-${period}-${days}"
  drange="${begin}:${end}"
  report=azure_forecast_${year}_p${period}_w${week}.csv
fi
echo "Generating report for range: $drange"
./do-az-subscriptions | grep "$AZ_SUBSCRIPTIONS_PATT_IN" | grep -v "$AZ_SUBSCRIPTIONS_PATT_OUT" | while IFS=',' read sub id; do ./do-az-forecast -d "$drange" -u -s "$sub,$id"; done
./do-az-subscriptions | grep "$AZ_SUBSCRIPTIONS_PATT_IN" | grep -v "$AZ_SUBSCRIPTIONS_PATT_OUT" | 
  while IFS=',' read sub id
  do 
    echo "$sub,$(cat "$sub.csv"|grep -v "^tot"|tail -1)"
  done > "$report"
echo "Generated report: $report" 
