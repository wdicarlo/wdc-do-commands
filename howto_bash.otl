bash howto
	List of bash how to
Replace $PWD with pwd command
	pwd -P
Get absolute path of a file/link
	readlink -f <file|link>
Concatenate output of two or more commands
	(do-find-files -r ../../lua-5.1.5-src/ Makefile ; pwd) | grep avro
Grep text file containing NUL character (^@)
   cat afile | grep --text astring
Echoing without newlines
   echo -n "Hello "; echo "World"
grep AND+OR expression
	cat <file> | grep "<patt1>.*\(<patt2>\|<patt3>\)"
Reverse the order of the input lines
	<pipe> | tac
Force grep to consider text input
	<pipe> | grep --text <grep_pattern>
Redirect to null
	mkdir ~/tmp > /dev/null 2>&1
Sleep and wait last background process
	sleep 10 & wait ${1}
The Art of Command Line
    curl -s 'https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md' | egrep -o '`\w+`' | tr -d '`'
Check if script is run in a terminal or in a pipe
	if [ -t 1 ] ; then echo terminal; else echo "not a terminal"; fi
Check if the pipe usage is detected
	(if [ -t 1 ] ; then echo terminal; else echo "not a terminal"; fi) | cat
Process substitution
	cat <(echo A) <(echo B)
Reset terminal colors
	tput sgr0 is normally the equivalent of echo -en "\e[0m"
Date operation
	date -d "2020/09/30 + 168 days"
Sort by not considering the first line
	cat data.csv | cut -d";" -f 1,2 | (read -r; printf "%s\n" "$REPLY"; sort) | uniq
Create a file using redirection
  cat <<EOF > requirements.txt
    tables==3.5.1
    azure-storage-blob==12.1.0
    attrs==19.3.0
    fsspec==0.7.2
    kneed==0.6.0
    matplotlib==3.2.1
    scikit-learn==0.22.2.post1
    xgboost==0.90
  EOF
Add \ character at the end of all lines apart the last one
  cat date.csv|sed '$!s/$/ \\/'
Remove substring from the begin of a variable value
	${var#substr}  # shortest matching pattern
	${var##substr} # longest matching pattern
Remove substring from the end of a variable value
	${var%substr}  # shortest matching pattern
	${var%%substr} # longest matching pattern
Simulate a failing bash script
	true && sh -c 'exit 1' # $(echo $?) # print 1
Convert variable value to lowercase
	echo ${STR,}   #=> "hELLO WORLD!" (lowercase 1st letter)
	echo ${STR,,}  #=> "hello world!" (all lowercase)
Convert variable value to uppercase
	echo ${STR^}   #=> "Hello world!" (uppercase 1st letter)
	echo ${STR^^}  #=> "HELLO WORLD!" (all uppercase) # echo $STR | tr [:lower:] [:upper:]	
List length of all files in the current folder
	ls -1 | xargs -I@ sh -c "echo -n "@:";cat @|wc -l" |sort -t':' -k2 -n | column -t -s':'
Use a command completion generated by the command
	source <(kubectl completion bash)
Use command completion with aliases
	alias k=kubectl
	complete -F __start_kubectl k
