Howto jq
	Tips and tricks about jq usage
List github projects' name and URL
	do-github-search -q -l java mongodb | jq  '[.items[]| {(.name): (.html_url)}]|add'
Filter out github search result
	do-github-search -q  xavante | jq  '[.items[]| {(.name): [(.html_url),(.language)]}]|add'
Concatenate two json arrays
	jq --argjson arr1 "$firstArr" --argjson arr2 "$secondArr" -n '$arr2 + $arr1'
Print fields in columns
	cat r_packages_info.json | jq '. | "\(.full_name); \(.description)"'
	cat r_packages_info.json | jq '. | .full_name + ";" + .description'
Convert CSV to JSON
	cat data.csv | jq -Rsn '{occurrences: [inputs | . / "
" | (.[] | select(length > 0) | . / ";") as  | {"name": [$input[0], $input[1]], "address": {"city": $input[2]}}]}'
Build JSON with values of another JSON
	cat data.json | jq '[.[].fields | {(.customfield_29497): (.summary)}]'
Filter and rename JSON fields
	cat data.json | jq '[.[].fields | {"id": (.customfield_29497),"name": (.summary),"status":(.status.name),"offering":(.customfield_37062.value)}]'
Filter items by value of a field
	cat data.json | jq '.[] | select( .status | contains("MOCKUP","WAIT") )'
Extract all Bugs
	cat tickets.json | jq '.[] | [select( .fields.issuetype.name | contains("Bug") )]' | jq '.[] | "\(.key);\(.fields.description)"'
Join json files
	cat json_files/* | jq '.' | jq -s '.'
Join json array files
	cat json_files/* | jq '.[]' | jq -s '.'
Convert string date to timestamp number
	echo "{ \"date\": \"2015-03-05T23:51:47Z\" }" | jq '.date|fromdateiso8601'
Filter by date
	cat data.json |sed 's/\.[0-9]\+Z/Z/'| jq '.[] | select(.created_at|fromdateiso8601 > 1561327200)'
Join values of field
    echo "[{\"id\":\"1\"},{\"id\":\"B\"},{\"id\":\"C\"}]"|jq '. | map(.id) | join(",")'
Join values of field which could not exist
    echo "[{\"id\":1,\"tags\":[]},{\"id\":2,\"tags\":[{\"name\":\"A\"},{\"name\":\"B\"}]}]"|jq '.[]|.tags | map(.name) | join(",")'
Filter by number threshold
    echo "[{\"id\":1},{\"id\":\"B\"},{\"id\":\"C\"},{\"id\":4}]"|jq '.[].id | select(numbers) | select(. < 3)'
Filter by number range
    echo "[{\"id\":1},{\"id\":\"B\"},{\"id\":\"C\"},{\"id\":4}]"|jq '.[].id | select(numbers) | select(. > 2 and . < 6)'
Conditionally change values 
    cat data.json | jq '.[] |if .key == "MYISSUE-2" then .fields.resolutiondate = "2019-07-01T17:22:52.000+0300" else . end'| jq '"\(.key);\(.fields.resolutiondate)"'
