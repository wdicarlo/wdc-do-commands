#!/usr/bin/env bash

# TODO: add option to search within the files present in the topic file
# TODO: post-process topic search result to store git branches as metadata
# TODO: allow to refine existing search result

cmd=`basename $0`

TOPICS_DIR="${HOME}/.do-find-string"
if [ ! "$PROJECT_TASK" == "" ]; then
  if [ "$(echo $PROJECT_TASK|cut -d':' -f1)" == "^" ]; then
    TOPICS_DIR="$TASKS"
  else
    TOPICS_DIR="$PROJECT_TASKS"
  fi
fi
[ ! -d '${TOPICS_DIR}' ] && mkdir -p "${TOPICS_DIR}"

function usage() {
    echo "Usage: $cmd [-h] [-a] [-i] [-b] [-p] [-c ] [-l|L|E] [-s "substitute-string"][-e <exclude-patt>] [-r <root>] [-n <depth>] [-f <file-pattern>] [-C n] [-w] [-t|T|V|R <topic>] <string>"
    echo "where:"
    echo "       -h                          : print this help"
    echo "       -i                          : ignore case"
    echo "       -b                          : include binary files"
    echo "       -c                          : just count occurences"
    echo "       -p                          : just print the paths"
    echo "       -r <root>                   : start from root folder"
    echo "       -n <depth>                  : max depth to search into"
    echo "       -f <file-pattern>           : filename pattern to use"
    echo "       -e <exclude-patt>           : exclude pattern"
    echo "       -a                          : use ack-grep"
    echo "       -s \"substitute-string\"      : substitute <string> with substitute-string"
    echo "       -C n                        : context like A2 B1 C3..."
    echo "       -l                          : list available topics"
    echo "       -L                          : print last topic, same as -T -"
    echo "       -t <topic|->                : append the result to [-=last] topic file"
    echo "       -T <topic|-|^>              : print [-=last, ^=last global] topic file"
    echo "       -V <topic|->                : explore [-=last] topic file in Vim"
    echo "       -E                          : explore last topic file in Vim, same as -V -"
    echo "       -R <topic|->                : reset [-=last] topic file"
    echo "       -w                          : find whole word"
    echo "       -v                          : verbose"
    echo "       -q                          : quiet"
}

function print_topic() {
  topic="$1"
  topic_file=$(echo "${TOPICS_DIR}/${topic}/${topic}.txt")
  [ ! -f "${topic_file}" ] && return
  root=""
  cat "$topic_file" | while read -r line
  do
    [ "${line:0:6}" == "# PWD=" ] && root="${line:6}" && continue
    [ "${line:0:1}" == "#" ] && continue
    echo "$line" | sed "s#^\.#$root#"
  done
}
if [ $# == 0 ]; then
    usage
    exit
fi

pars="-Hn"
root="."
file=""
depth=99
postproc=""
exclude=""
quiet=0
binary=0
grep_cmd="\grep"
ss=""
verbose=0
taction=0
topic=""
if [ ! -t 1 ]; then
    quiet=1
fi
while getopts habqicpr:n:f:e:s:gC:vwt:T:lLR:V:E flag
do
    case $flag in
        t)
            topic=$OPTARG
            taction=1 # append
            ;;
        T)
            topic=$OPTARG
            taction=2 # print
            ;;
        V)
            topic=$OPTARG
            taction=6 # print
            ;;
        l)
            taction=3 # list
            ;;
        E)
            taction=7 # print last used topic
            topic="-"
            ;;
        L)
            taction=5 # print last used topic
            ;;
        R)
            topic=$OPTARG
            taction=4 # append
            ;;
        a)
            ack_grep=`which ack-grep`
            if [ ! -z "$ack_grep" ]; then
                grep_cmd="ack-grep"
            fi
            ;;

        v)
            verbose=1
            ;;
        b)
            binary=1
            ;;
        q)
            quiet=1
            ;;
        w)
            grep_cmd="$grep_cmd -w"
            ;;
        C)
            grep_cmd="$grep_cmd -$OPTARG"
            ;;
        e)
            exclude=$OPTARG
            ;;
        s)
            ss=$OPTARG
            pars="-l"
            postproc="xargs -I@ sed -i -e 's#$string#$ss#g' @"
            binary=0
            ;;
        i)
            pars+="i"
            ;;
        p)
            pars="-l"
            ;;
        c)
            # just count occurences, filter out files with not matching the string and revert sort the list
            pars="-Hnc"
            postproc="\grep -v \":0\"| sort -t \":\" -nr -k 2"
            ;;
        f)
            if [ "$file" == "" ]; then
                file="-name $OPTARG"
            else
                file+=" -or -name $OPTARG"
            fi
            ;;
        r)
            root=$(echo $OPTARG | sed 's#/$##')
            [ ! -d "$root" ] && echo "Not a folder: $root" && exit
            ;;
        n)
            depth=$OPTARG
            ;;
        h)
            usage
            exit
            ;;
        ?)
            usage
            exit
            ;;
    esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

string=$1

bin_filter="| do-pipe-wrapped-text | xargs file | grep text | cut -d: -f1"
if [ $binary -eq 1 ]; then
    bin_filter=""
fi

#sav_filter="| grep -v \".sav$\""
sav_filter=""
verbose_cmd=""
if [ $verbose -eq 1 ]; then
	verbose_cmd="echo @;"
fi
if [ "$exclude" == "" ]; then
    cmd="find \".\" -maxdepth \"$depth\" \( -not -path \"*/.*\" -and -type f \) $file $bin_filter $sav_filter | xargs -I@ sh -c \"$verbose_cmd $grep_cmd --color \\\"$pars\\\" \\\"$string\\\" \\\"@\\\"\""
else
    cmd="find \".\" -maxdepth \"$depth\" \( -not -path \"*/.*\" -and -type f \) $file $bin_filter $sav_filter | xargs -I@ sh -c \"$grep_cmd --color \\\"$pars\\\" \\\"$string\\\" \\\"@\\\"| \grep -v \\\"$exclude\\\"|\grep --color \\\"$string\\\"\""
fi
if [ ! "$postproc" == "" ]; then
    cmd+="|$postproc"
fi
[ ! "$root" == "." ] && cmd="cd $root && $cmd || cd ${PWD}"
cmd+=" 2>/dev/null"
TASK=$(echo $PROJECT_TASK|cut -d':' -f2)
[ $taction -eq 0 ] && [ ! "$TASK" == "" ] && taction=1 && topic="$TASK"
[ $taction -eq 0 ] && [ "$TASK" == "" ] && taction=99 && topic="do-find-string"
if [ $taction -gt 0 ]; then
    #TODO: remove special characters from $string
    [ $taction -eq 5 ] && topic="-" && taction=2 && [ ! "$TASK" == "" ] && topic="$TASK"
    [ $taction -eq 2 ] && [ "$topic" == "^" ] && topic="do-find-string" && TOPICS_DIR="$HOME/.do-find-string"
    [ "$topic" == "-" ] && topic=$(basename $(find $TOPICS_DIR -type f -exec ls -l --time-style +%Y%m%d%H%M {} \; | sort -t' ' -r -k6 | head -1 | cut -d' ' -f7) | sed 's#^\(.*\)\..*$#\1#') 
    [ $taction -eq 3 ] && find $TOPICS_DIR -type f -exec ls -l --time-style +%Y%m%d%H%M {} \; | sort -t' ' -r -k6 | cut -d' ' -f7 | xargs -I@ sh -c "basename @ " | sed 's#^\(.*\)\..*$#\1#' && exit
    topic_file=$(echo "${TOPICS_DIR}/${topic}/${topic}.txt")
    [ $taction -eq 4 ] && cp "${topic_file}" "${topic_file}.bak" && rm -f "${topic_file}" && echo "Reset: ${topic_file} Backup: ${topic_file}.bak" && exit
    [ ! -f "${topic_file}" ] && mkdir -p $(dirname $topic_file) && echo "# do-find-string: topic=$topic" > "${topic_file}"
    [ $taction -eq 2 ] && print_topic "${topic}" && exit
    [ $taction -eq 99 ] && rm -f "${topic_file}" # reset result file
    if [ ! "$string" == "" ]; then
      echo "# PWD=$(readlink -f $root)" >> "${topic_file}"
      #cmd+=" | sed \"s#^\\.#\$PWD#\""
      echo "# $cmd" >> "${topic_file}"
      [ $quiet -eq 0 ] && echo "> $cmd"
      [[ $taction -ne 6 && $taction -ne 7 ]] && eval $cmd | tee -a $topic_file | sed "s#^.#$root#" | \grep --color "^\|$string" && exit
      [[ $taction -eq 6 || $taction -eq 7 ]] && eval $cmd >> $topic_file
    fi
    [[ $taction -eq 6 || $taction -eq 7 ]] && print_topic "${topic}" | do-pipe-cfile-to-vim && exit
else
    [ $quiet -eq 0 ] && echo "> $cmd"
    eval $cmd 
fi
