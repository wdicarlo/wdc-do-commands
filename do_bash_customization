#!/bin/bash

force_color_prompt=yes


export TESTS=~/tests
export RELEASES=~/releases
export PROJECTS=~/projects
export SHARED_FOLDER=/media/share
if [ -f ~/bin/do_bash_env ]; then
    # do_bash_env example:
    # #!/usr/bin/env bash
    # 
    # export TESTS=~/tests
    # export RELEASES=~/releases
    # export PROJECTS=/wc/wdicarlo/projects
    # export SHARED_FOLDER=/wc/wdicarlo/share
    # export PATCHES_DIR=/wc/wdicarlo/share/ec/patches
    # 
    # export BASH_COMPLETITION_DIR=$(echo ~/bin/bash_completion.d)
    echo "Sourcing file: do_bash_env"
    source  ~/bin/do_bash_env
    echo "PROJECTS               =  $PROJECTS"
    echo "TESTS                  =  $TESTS"
    echo "RELEASES               =  $RELEASES"
    echo "SHARED_FOLDER          =  $SHARED_FOLDER"
    echo "BASH_COMPLETITION_DIR  =  $BASH_COMPLETITION_DIR"
    echo "PROMPT_VARS            =  $PROMPT_VARS"
else
    echo "Missing file: do_bash_env"
fi

bash_compl_dir=$BASH_COMPLETITION_DIR

# to use vim keybindings in bash, 
# do "set -o vi". Then, you can 
# press "v" to edit current command 
# in vim.
#set -o vi
echo "Customizing bash"

function update_prompt()
{
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        PS1='\t:\[\033[01;32m\]$TYPE\[\033[00m\]:\[\033[01;31m\]$PROJECT\[\033[00m\]:\[\033[01;34m\]$LOCATION\[\033[00m\]@\[${GREEN}\]$REPO_LOCATION\[${RESET}\][$REPO_SYNT]{${PROMPT_VARS}}\$ '
    else
        PS1='\t:$TYPE:$PROJECT:$LOCATION \$ '
    fi
}
function bash_completion()
{
    if [ "$bash_compl_dir" == "" ]; then
        return
    fi
	if [ ! -d $bash_compl_dir ]; then
		return
	fi
	FILES=$(ls $bash_compl_dir)
	for FILE in $FILES; do
		bash_compl_file="$bash_compl_dir/$FILE"
		echo "Sourcing file: $bash_compl_file"
		source $bash_compl_file
	done	
}

function cd_folder()
{
   # check it is present the # symbol, otherwise use the standard cd command
   echo "WARNING: STILL UNDER DEVELOPMENT"
}

function edit_last()
{
cmd=`history |grep "^[0-9]* *vi "|tail -1|sed "s/^[0-9]* *//"`
echo "> $cmd"
eval $cmd
}

# spinner got from http://fitnr.com/showing-a-bash-spinner.html
# When you have a task to run that will take a large (or unknown) amount of time invoke it in a background subshell like this:
# 
# (a_long_running_task) &
# 
# Then, immediately following that invocation, call the spinner and pass it the PID of the subshell you invoked.
# 
# spinner $!
# 
# The $! is a bash internal variable for the PID of the last job run in the background. 
#
# TODO: evaluate pv (pipe viewer) command
#
function spinner()
{
    local pid=$1
    local delay=0.175
    local spinstr='|/-\'
    tput civis;
    local infotext=$2
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c] %s" "$spinstr" "$infotext"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
        for i in $(seq 1 ${#infotext}); do
            printf "\b"
        done
    done
    printf " \b\b\b\b"
    tput cnorm;
}
alias spinner='sleep 3 && spinner $! "Doing something big..."'

function make()
{
  # see http://stackoverflow.com/questions/6436563/how-can-i-highlight-the-warning-and-error-lines-int-the-make-output
  for par in $@ 
  do
     if [[ $par == *"clean"* ]]; then
        clean_path=$(pwd)
        echo "==========================================================="
        echo "CLEANING in         : $clean_path"
        echo "CLEANING with target: $par"
        echo "==========================================================="
        echo "Are you sure? {Y/N}"
        read answer
        if [ "$answer" != "Y" ]
        then
           return
        fi
     fi
  done

  #pathpat="(/[^/]*)+:[0-9]+"
  pathpat="^.*$"
  ccred=$(echo -e "\033[0;31m")
  ccgreen=$(echo -e "\033[0;32m")
  ccyellow=$(echo -e "\033[0;33m")
  ccend=$(echo -e "\033[0m")
  /usr/bin/make "$@" 2>&1 | sed -E \
      -e "/^cc/ s%$pathpat%$ccgreen&$ccend%g" \
      -e "/[Ee]rror:/ s%$pathpat%$ccred&$ccend%g" \
      -e "/[Uu]ndefined reference to/ s%$pathpat%$ccred&$ccend%g" \
      -e "/core dumped/ s%$pathpat%$ccred&$ccend%g" \
      -e "/[Ww]arning:/ s%$pathpat%$ccyellow&$ccend%g"
  return ${PIPESTATUS[0]}
}

function vim_launcher() {
opts=""
if [ $# -eq 1 ]; then
    if [ -f "$1" ]; then
        n=`cat "$1" | wc -l`
        if [ $n -gt 5000 ]; then
            opts="--noplugin $1"
            shift
        fi
    else
        if [ -d "$1" ]; then
            opts="$1"
            shift
        fi
    fi
fi

for opt in $@
do
    if [ -f "$opt" ]; then
        if [ `file "$opt" | grep -o executable` ]; then
            # make sure it is a binary file
            if [ ! `file "$opt" | grep -o text` ]; then
                for file in `ls "$opt".*| grep -v "\.sav$"`
                do
                    if [ `file "$file" | grep -o text` ]; then
                        opts="$opts -p $file"
                    fi
                done
                continue
            fi
        fi
    else
        n=0
        for file in `ls "$opt"*|grep -v ".sav$"`
        do
                    if [ `file "$file" | grep -o text` ]; then
                        opts="$opts -p $file"
                        n=$((n+1))
                    fi
        done
        if [ $n -gt 0 ]; then
            continue
        fi
    fi
    opts="$opts $opt"
done
cmd="vim $opts"
echo "> $cmd"
eval $cmd
}


#. ~/bin/do_setup_env_for_okl4sdk-5.1.8m4
#. ~/bin/do_setup_env okl4sdk-5.1.8m4
. ~/bin/do_setup_env 

function mkcd() {
    mkdir "$1"
    cd "$1"
}
function mterm() {
    #xfce4-terminal --geometry=80x20
    xterm -fn 10x20
}
function svn_branch() {
    export SVN_LOCATION=""
    wdir=$(pwd)
    # find root folder
    export SVN_ROOT=""
    if [ -d ".svn" ]; then
        SVN_ROOT=$(pwd)
    else
        go_repo_root
        if [ -d ".svn" ]; then
            SVN_ROOT=$(pwd)
        fi
    fi
    if [ "$SVN_ROOT" == "" ]; then
        \cd "$wdir"
        return
    fi
    #SVN_LOCATION=$(basename $(svn info|grep "^URL"|awk '{print $2}'))
    export SVN_LOCATION=$(\svn info|grep "^Relative URL"|awk '{print $3}')
    SVN_LOCATION=${SVN_LOCATION#"^/branches/$SVN_USER/"}
    SVN_LOCATION=${SVN_LOCATION#"^/branches/"}
    #echo "SVN_LOCATION=$SVN_LOCATION"
    export SVN_SYNT=$(\svn status|grep -v cscope|grep -v ".settings"|grep -v "RTOSE"|grep -v "^Performing"|awk '{print $1}'|sort|uniq|grep -v "X"|tr -d '\n')
    \cd "$wdir"
}
function update_env() {
    #export PROMPT_VARS=""
    export TYPE=`pwd | sed -e "s/\// /g" | awk '{ print $3}'`
    # if [ "$TYPE" = "projects" ];
    # then
    #     TYPE="p"
    # fi
    export PROJECT=""
    case $TYPE in
        "projects")
            TYPE="p"
            PROJECT=`pwd | sed -e "s/\// /g" | awk '{ print $4}'`
            ;;
        "tests")
            TYPE="t"
            PROJECT=`pwd | sed -e "s/\// /g" | awk '{ print $4}'`
            ;;
        "releases")
            TYPE="r"
            PROJECT=`pwd | sed -e "s/\// /g" | awk '{ print $4}'`
            ;;
    esac

    export PROJECT_PATH=`echo $PROJECTS/$PROJECT`
    export TEST_PATH=`echo $TESTS/$PROJECT`
    export RELEASE_PATH=`echo $RELEASES/$PROJECT`
    export LOCATION=`basename $PWD`
    if [ "$PROJECT_PATH" == $PWD ]
    then
        LOCATION=""
    fi
    if [ "$TEST_PATH" == $PWD ]
    then
        LOCATION=""
    fi
    if [ "$RELEASE_PATH" == $PWD ]
    then
        LOCATION=""
    fi
    #svn info >/dev/null 2>&1 && SVN_LOCATION=$(basename $(svn info|grep "^URL"|awk '{print $2}'))
    export REPO_LOCATION=""
    export REPO_SYNT=""
    svn_branch
    if [ ! "$SVN_LOCATION" == "" ]; then
        REPO_LOCATION="S:$SVN_LOCATION"
        REPO_SYNT=$(\svn status |grep -v cscope|grep -v ".settings"|grep -v "RTOSE"|grep -v "^Performing"|awk '{print $1}'|sort|uniq|grep -v "X"|tr -d '\n')
    fi
    git status >/dev/null 2>&1 && GIT_LOCATION=$(git status | grep "^# On"|awk '{print $4}')
    if [ ! "$GIT_LOCATION" == "" ]; then
        REPO_LOCATION="G:$GIT_LOCATION"
        REPO_SYNT=$(git status -s | awk '{print $1}'|sort|uniq|tr -d '\n')
    fi
    #echo "PROJECT_PATH=$PROJECT_PATH"
    #echo "REPO_LOCATION=$REPO_LOCATION"
    #echo "REPO_SYNT=$REPO_SYNT"
    if [ -f .bash_env ]
    then
        cat .bash_env | grep "^export .*=" | sed 's/^export \(.*\)=.*/\1/' | xargs -I@ sh -c 'echo "@=\$@"'
        source .bash_env
    else
        shift $#
        source ~/bin/do_setup_env
    fi
    update_prompt
}
function svn_cmd() {
    pars=""
    comment=0
    for par in "$@"; do
        if [ $comment -eq 1 ]; then
            epar=$(echo "\"$par\""|sed 's/"/\"/g')
            pars="$pars $epar"
            comment=0
        else
            pars="$pars $par"
        fi
        if [ "$par" == "-m" ]; then
            comment=1
        fi
    done
    cmd="$SVN_CMD $pars && cd ."
    echo -E "> $cmd"
    eval "$cmd"
}

function cdenv() {
    if [ "$1" == "?" ]; then
       echo "Usage: cd [<symbol>|folder]"
       echo "where:"
       echo "           @ dir   cd at last specified folder, using dir pattern"
       echo "           !       cd into last modified folder"
       echo "           ^       cd to project/s root"
       echo "           $       cd to sources root"
       echo "           -       return to last visited folder"
       echo "           .       just update the env. variables"
       if [ ! -z "$PROJECT" ]; then
           env | grep "PROJECT_ROOT"|sed 's/PROJECT_ROOT//'|sed 's/=/ /'|sort -n
       fi
       return
    fi
    if [ "$1" == "@" ]; then
       if [ ! $# -eq 2 ]; then
          echo "Wrong parameters"
          return
       fi
       \cd $(last | xargs -I@ sh -c "[ -d @ ] && echo @" 2>/dev/null|grep $2)
       update_env
       return
    fi
    if [ "$1" == "!" ]; then
       \cd $(last | xargs -I@ sh -c "[ -d @ ] && echo @" 2>/dev/null|head -1)
       update_env
       return
    fi
    if [ "$1" == "-" ]; then
       \cd -
       update_env
       return
    fi
    if [ "$1" == "^" ]; then
       gohome -p
       update_env
       return
    fi
    if [ "$1" == "$" ]; then
       \cd "$PROJECT_PATH/$SOURCES_ROOT"
       update_env
       return
    fi
    if [ "$1" == "." ]; then
       update_env
       return
    fi
    # TODO: evaluate to replace this with smartcd tool
    # use PROJECT_ROOTx vars to define relative paths
    # format: export PROJECT_ROOTx=<rel_prj_root>/<rel_prj_subfolder>
    NEW_PATH=$1
    if [ -z "${1##[0-9]*}" ]; then
       PROJECT_ROOT=$(eval "echo \$$(echo PROJECT_ROOT${1})")
       if [ ! -z "$PROJECT_ROOT" ]; then
          PROJECT_ROOT=$PROJECT_PATH/$PROJECT_ROOT
          if [ -d "$PROJECT_ROOT" ]; then
             NEW_PATH="$PROJECT_ROOT"
          fi
       fi
    fi
    if [ ! -d $NEW_PATH ]; then
       NEW_PATH=$(ls -1t | grep "$1")
       if [ ! -d $NEW_PATH ]; then
           echo "Missing folder or ambigus name: $NEW_PATH"
           $(ls -1t | grep "$1")
           return
       fi
    fi

    \cd $NEW_PATH
    pwd
    # if [ -f .bash_env ]
    # then
    #     cat .bash_env
    #     source .bash_env
    # else
    #     shift $#
    #     . ~/bin/do_setup_env
    # fi
    update_env
}
function setup_env() {
    if [ -f .bash_env ]; then
        . .bash_env
    fi
}
function go_repo_root() {
    path=`dirname $PWD`
    folder=`basename $PWD`
    if [ $folder == "/" ]
    then
        return
    fi
    if [ $folder == "$user" ]
    then
        path="/"
        echo "$path"
        \cd `echo $path`
        return
    fi
    found=0
    user=`whoami`
    while [ $found -eq 0 ]
    do
        folder=`basename $path`
        parent=`dirname $path`
        parent_folder=`basename $parent`

        #echo $path
        #echo $folder
        #echo $parent
        if [ $folder == "$user" ] ||
            [ -d "$path/.git" ] ||
            [ -h "$path/.git" ] ||
            [ -d "$path/.svn" ] ||
            [ -h "$path/.svn" ] ||
            [ -f "$path/.bash_env" ] ||
            [ -d "$parent/$folder.git" ] ||
            [ "$parent_folder" == "projects" ] ||
            [ "$parent_folder" == "releases" ] ||
            [ "$parent_folder" == "tests" ] ||
            [ $folder == "/" ] 
        then
            found=1
        else
            path=$parent
        fi
    done
    \cd `echo $path`
}
function gohome() {
    # find upword the following: .git, project folder, user home
    repo=0
    if [ $# -gt 0 ]
    then
        if [ "$1" == "-h" ]
        then
            echo "Usage: gh [-p|-u|-r]"
            echo "       where:"
            echo "               -p       : go to project home"
            echo "               -u       : go to user home"
            echo "               -r       : go to repository home"
            return
        fi
        if [ "$1" == "-p" ]; then
           \cd $PROJECT_PATH 
           setup_env
           update_env
           return
        fi
        if [ "$1" == "-u" ]; then
            \cd `echo ~`
            setup_env
            update_env
            return
        fi
        if [ "$1" == "-r" ]; then
            repo=1
        fi
    fi

    path=`dirname $PWD`
    folder=`basename $PWD`
    if [ $folder == "/" ]
    then
        return
    fi
    if [ $folder == "$user" ]
    then
        path="/"
        echo "$path"
        \cd `echo $path`
        setup_env
        update_env
        return
    fi
    found=0
    user=`whoami`
    while [ $found -eq 0 ]
    do
        folder=`basename $path`
        parent=`dirname $path`
        parent_folder=`basename $parent`

        #echo $path
        #echo $folder
        #echo $parent
        if [ $repo -eq 0 ]; then
            if [ $folder == "$user" ] ||
                [ -d "$path/.git" ] ||
                [ -h "$path/.git" ] ||
                [ -d "$path/.svn" ] ||
                [ -h "$path/.svn" ] ||
                [ -d "$path/src" ] ||
                [ -f "$path/.bash_env" ] ||
                [ -d "$parent/$folder.git" ] ||
                [ "$parent_folder" == "projects" ] ||
                [ "$parent_folder" == "releases" ] ||
                [ "$parent_folder" == "tests" ] ||
                [ $folder == "/" ] 
            then
                found=1
            else
                path=$parent
            fi
        else
            if [ $folder == "$user" ] ||
                [ -d "$path/.git" ] ||
                [ -h "$path/.git" ] ||
                [ -d "$path/.svn" ] ||
                [ -h "$path/.svn" ] ||
                [ -f "$path/.bash_env" ] ||
                [ -d "$parent/$folder.git" ] ||
                [ "$parent_folder" == "projects" ] ||
                [ "$parent_folder" == "releases" ] ||
                [ "$parent_folder" == "tests" ] ||
                [ $folder == "/" ] 
            then
                found=1
            else
                path=$parent
            fi
        fi
    done
    echo "$path"
    \cd `echo $path`
    ls
    setup_env
    update_env
}

function last() {
    opts="-1t"
    quiet=0
    if [ ! -t 1 ]; then
       quiet=1
    fi
    if [ $# -gt 0 ]
    then
        if [ "$1" == "-h" ]
        then
            echo "Usage: last [-q|-p|-s|-l|<ls-options>] [<path>]"
            echo "       where:"
            echo "               -q       : quiet"
            echo "               -p       : like -1dt"
            echo "               -s       : like -1sht"
            echo "               -l       : like -last"
            return
        fi
        if [ "$1" == "-q" ]
        then
            quiet=1
            shift
        fi
        if [ "$1" == "-p" ]
        then
            shift
            p="."
            if [ $# -gt 0 ]; then
                p="$1"
            fi
            if [ $quiet -eq 0 ]; then
                echo "> ls -1dt $p/* | head -20"
            fi
            ls -1dt $p/* | head -20
            return
        fi
        if [ "$1" == "-s" ]
        then
            opts="-1sht"
            shift
        fi
        if [ "$1" == "-l" ]
        then
            opts="-last"
            shift
        fi
    fi
    #ls -last $@ | head -20
    cmd="ls $opts $@ 2>/dev/null | head -20"

    if [ $quiet -eq 0 ]; then
        echo "> $cmd"
    fi
    eval $cmd
}

function do_activate_release() {
    script=`echo ~/bin/do_activate_release`
    source $script
}

function copy_and_cd()
{
    if [ "$#" -ne 2 ];
    then
        echo "Usage: cac <file> <dest-folder>"
        return
    fi
    if [ -d "$2" ];
    then
        cp $1 $2
        cd $2
    fi
}
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

function prompt_command()
{
#    export TYPE=`pwd | sed -e "s/\// /g" | awk '{ print $3}'`
#    # if [ "$TYPE" = "projects" ];
#    # then
#    #     TYPE="p"
#    # fi
#    export PROJECT=""
#    case $TYPE in
#        "projects")
#            TYPE="p"
#            PROJECT=`pwd | sed -e "s/\// /g" | awk '{ print $4}'`
#            ;;
#        "tests")
#            TYPE="t"
#            PROJECT=`pwd | sed -e "s/\// /g" | awk '{ print $4}'`
#            ;;
#        "releases")
#            TYPE="r"
#            PROJECT=`pwd | sed -e "s/\// /g" | awk '{ print $4}'`
#            ;;
#    esac
#
#    export PROJECT_PATH=`echo $PROJECTS/$PROJECT`
#    export TEST_PATH=`echo $TESTS/$PROJECT`
#    export RELEASE_PATH=`echo $RELEASES/$PROJECT`
#    export LOCATION=`basename $PWD`
#    if [ "$PROJECT_PATH" == $PWD ]
#    then
#        LOCATION=""
#    fi
#    if [ "$TEST_PATH" == $PWD ]
#    then
#        LOCATION=""
#    fi
#    if [ "$RELEASE_PATH" == $PWD ]
#    then
#        LOCATION=""
#    fi
#    SVN_LOCATION=""
#    svn info >/dev/null 2>&1 && SVN_LOCATION=$(basename $(svn info|grep "^URL"|awk '{print $2}'))
#    GIT_LOCATION=""
#    git status >/dev/null 2>&1 && GIT_LOCATION=$(git status | grep "^# On"|awk '{print $4}')
#    REPO_LOCATION=""
#    REPO_SYNT=""
#    if [ ! "$SVN_LOCATION" == "" ]; then
#        REPO_LOCATION=$SVN_LOCATION
#        REPO_SYNT=$(svn status|grep -v cscope|grep -v ".settings"|grep -v "RTOSE"|grep -v "^Performing"|awk '{print $1}'|sort|uniq|grep -v "X"|tr -d '\n')
#    fi
#    if [ ! "$GIT_LOCATION" == "" ]; then
#        REPO_LOCATION=$GIT_LOCATION
#        REPO_SYNT=""
#    fi
    # TODO: add repo status syntesis: [M|A|?] 
    update_prompt 
    history -a; history -c; history -r
}
function fsv()
{
    if [ $# -eq 0 ]; then
        cfile=$(ls -1t ~/.do-find-string|head -1)
    else
        if [ "$1" == "-l" ]; then
            shift
            if [ $# -gt 0 ]; then
                ls -1t ~/.do-find-string | grep $1 | head -20 | grep $1
            else
                ls -1t ~/.do-find-string | head -20
            fi
            return
        elif [ "$1" == "-L" ]; then
            shift
            if [ $# -gt 0 ]; then
                ls -1t ~/.do-find-string | grep $1
            else
                ls -1t ~/.do-find-string
            fi
            return
        elif [ "$1" == "-h" ]; then
            cmd=$(basename $0)
            echo "Usage: $cmd [-h] [-l] [-L] [<grep-pattern>]"
            echo "                  -l            : list last available queries"
            echo "                  -L            : list all available queries"
            return
        fi
        cfile=$(ls -1t ~/.do-find-string|grep $1|head -1)
    fi
    cfile=$(echo ~/.do-find-string/$cfile)
    if [ ! -f "$cfile" ]; then
        echo "Missing cfile"
        return
    fi
    cat "$cfile"|do-pipe-cfile-to-vim
}
export PATCHES_DIR=""
export SVN_LOCATION=""
export SVN_SYNT=""
export GIT_LOCATION=""
export GIT_SYNT=""
export REPO_LOCATION=""
export REPO_SYNT=""
PROMPT_COMMAND=prompt_command
GREEN="$(tput setaf 2)"
RESET="$(tput sgr0)"
# #export PS1="\[\033[00m\]\u@\h\[\033[01;34m\] \W \[\033[31m\]\$(parse_git_branch) \[\033[00m\]$\[\033[00m\] "
# #if [ "$color_prompt" = yes ]; then
# if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
#     #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
#     #PS1='\[\033[01;32m\]$TYPE\[\033[00m\]:\[\033[01;31m\]$PROJECT\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '
#     PS1='\t:\[\033[01;32m\]$TYPE\[\033[00m\]:\[\033[01;31m\]$PROJECT\[\033[00m\]:\[\033[01;34m\]$LOCATION\[\033[00m\]@${GREEN}$REPO_LOCATION${RESET}[$REPO_SYNT]\{$PROMPT_VARS\}\$ '
# else
#     #PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
#     #PS1='`basename \w` \$ '
#     #PS1='$TYPE:$PROJECT:\W \$ '
#     PS1='\t:$TYPE:$PROJECT:$LOCATION \$ '
# fi
update_prompt

bash_completion

alias do-bash-customization='. ~/bin/do_bash_customization && cd .'

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='\ls --color=auto'
    alias lf='\ls -1 | grep -v "sav$" | tr "\n" " " ; echo'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

unalias svn
SVN_CMD=$(which svn)

# some more ls aliases
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'

#alias vi='vim'
alias vi='vim_launcher $@'
alias vinp='vim --noplugin $@'

alias cac="copy_and_cd $@"
#alias last="last $@"
alias last=last

alias eclipse='eclipse& > /dev/null 2>&1'

#alias term='xfce4-terminal --geometry=100x40'
alias term='xterm -maximized -fn 10x20&'
#alias miniterm='xfce4-terminal --geometry=80x20'
alias miniterm='xterm -fn 10x10&'

alias cd-p='cd $PROJECT/$PROJECT'

alias cd-projects='cd $PROJECTS'
alias cd-tests='cd $TESTS'
alias cd-releases='cd /media/sf_Shared/releases/'

alias do-project-creation='. ~/bin/do_project_creation'
alias do-cd-test='. ~/bin/do_cd_test'
alias do-cd-release='. ~/bin/do_cd_release'
alias do-cd-folder='. ~/bin/do_cd_folder'
alias do-cd-path='. ~/bin/do_cd_path'
alias do-cd-bookmark='. ~/bin/do_cd_bookmark'
alias do-cd-link='. ~/bin/do_cd_link'

alias do-bookmark-list='do-cd-bookmark -l'

alias cd=cdenv 
alias gh=gohome
alias do-project-activation='. ~/bin/do_project_activation'
alias do-activate-release='. ~/bin/do_activate_release'
alias do-activate-test='. ~/bin/do_activate_test'
alias do-setup-env='. ~/bin/do_setup_env -s'
alias do-setup-ld-library-path='. ~/bin/do_setup_ld_library_path $@'

alias do-history-update='. ~/bin/do_history_update'
alias do-history-add-last='. ~/bin/do_history_add_last'
alias do-history-diagram='. ~/bin/do_history_diagram'

alias mkca='make clean all'
alias mka='make all'

alias do-edit-last='edit_last'

alias do-git-conf-author-wdc='do-git-conf-author "Walter Di Carlo" walter@di-carlo.it'

alias _pa='do-project-activation'

alias _fs='do-find-string'
#alias _fsv='cat ~/.bash_output|do-pipe-cfile-to-vim'
alias _fsv='fsv'
alias _ff='do-find-files'
alias _cb='do-cd-bookmark'

alias _ss='do-svn-status'
alias _sse='do-svn-set-externals'
alias _slb='do-svn-list-branches'
alias _slt='do-svn-list-tags'

alias _af='do-arc-folder'
alias _ae='do-arc-extract-files'

alias _pf='do-publish-files'

alias svn="svn_cmd $@"

# default proxy setup
export http_proxy=
export https_proxy=$http_proxy
export ftp_proxy=$http_proxy
export rsync_proxy=$http_proxy
export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"
if [ -f ~/bin/do_proxy_setup ]; then
    echo "Sourcing file: do_proxy_setup"
    source  ~/bin/do_proxy_setup
    echo "http_proxy    = $http_proxy"
    echo "https_proxy   = $https_proxy"
    echo "ftp_proxy     = $ftp_proxy"
    echo "rsync_proxy   = $rsync_proxy"
    echo "no_proxy      = $no_proxy"
else
    echo "Missing file: do_proxy_setup"
fi

export SVN_EDITOR=vim
