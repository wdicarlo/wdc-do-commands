kubernetes
	system for automating deployment, scaling, and management of containerized applications
Download arkade - portable marketplace for downloading your favourite devops CLIs and installing helm charts
	curl -sLS https://dl.get-arkade.dev | sudo sh
List available tools
	arkade install --help
Get kind tool
	arkade get kind --version=v0.10.0
Get kubectl tool
	arkade get kubectl --version=v1.21.0
Create k8s cluster using kind
	kind create cluster
Get kubernetes version
	kubectl version # Server Version: version.Info{Major:"1", Minor:"18", GitVersion:"v1.18.6"... The Server Version is the version of Kubernetes your cluster is running.
Get nodes versions
	kubectl get nodes # example: pool-rxaxmuoj-5s42o   Ready    <none>   26d   v1.18.6
Get (kind) cluster information
	kubectl cluster-info --context kind-kind
Create a namespace
	kubectl create namespace argocd
Get the argocd CLI
	arkade install argocd
Install argocd without using arkade
	kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
Manage argocd with argocd
	argocd app create argo-cd --repo https://gitlab.cern.ch/clange/gitops-argo-cd.git --path 01_argo-cd --dest-server https://kubernetes.default.svc --dest-namespace argocd
Get argocd list of pods
	kubectl get pods --namespace argocd
Port-forward the argocd API server
	kubectl port-forward svc/argocd-server -n argocd 8443:443 &
Get the argocd password
	PASS=$(kubectl get secret argocd-initial-admin-secret \
	  -n argocd \
	  -o jsonpath="{.data.password}" | base64 -d)
Login in argocd
	argocd login --name local 127.0.0.1:8443 --insecure \
	 --username admin \
	 --password $PASS
Open the argocd UI:
	https://127.0.0.1:8443
List argocd accounts
	argocd account list
List k8s events filtered by namespace
	kubectl get events -n openfaas
Install k9s tool and run it
	arkade get k9s
	export LC_ALL=C && k9s
List applications deployed with argocd
	argocd app list -o wide
List available Custom Resources Definitions (CRD)
	kubectl get customresourcedefinitions.apiextensions.k8s.io
Create openfaas function with argocd
	argocd app create openfaas-functions \
		--repo https://github.com/wdicarlo/bring-gitops-to-your-openfaas-functions-with-argocd.git \
		--dest-server https://kubernetes.default.svc \ # this URL must be used when deploying in the same cluster that Argo CD is running in
		--path functions \
		--self-heal \
		--sync-policy automatic
Define KUBECONFIG variable to manage more than one k8s cluster
	export KUBECONFIG=<path_to_config_1>:<path_to_config_2>
View merged k8s clusters configs
	kubectl config view
Print specific config
	kubectl config --kubeconfig <path_to_config> view
Generate kubectl bash completition file
	kubectl completion bash
Query configured users 
	kubectl config view -o jsonpath='{.users[*].name}'   # get a list of users
	kubectl config view -o jsonpath='{.users[].name}'    # display the first user
	kubectl config view -o jsonpath='{.users[?(@.name == "local")].user.password}' # get password of local user
Manage contexts
	kubectl config get-contexts                          # display list of contexts
	kubectl config current-context                       # display the current-context
	kubectl config use-context my_cluster_name           # set the default context to my_cluster_name
	kubectl config unset current-context                 # unset the current context
	kubectl config set-context --current --namespace=mynamespace  # permantelly set the namespace of the current context
Get all pods configuration in json format
	k get pods --all-namespaces -o json | jq '.'
List all images in the cluster using jsonpath
	k get pods --all-namespaces -o jsonpath={..image} | tr ' ' '\n' | sort | uniq | column -t -s':'
List all images in the cluster using jq
	k get pods --all-namespaces -o json | jq -r '.items[].spec.containers[].image' | sort | uniq | column -t -s':' # -r to get the jq output without the " 
List tools available in the arkade repository
	arkade get
List all port-forwards
	kubectl get svc --all-namespaces -o json | jq '.items[] | {name:.metadata.name, p:.spec.ports[] } | select( .p.nodePort != null ) | "\(.name): localhost:\(.p.nodePort) -> \(.p.port) -> \(.p.targetPort)"'
Add port forwarding
	kubectl port-forward svc/airflow-webserver 8080:8080 -n airflow & # ps -f | grep 'kubectl' | grep 'port-forward'
Search in the cheat sheet
	curl -sS https://raw.githubusercontent.com/kubernetes/website/main/content/en/docs/reference/kubectl/cheatsheet.md | grep <term>
List AirFlow users
	k exec -ti -n airflow pods/airflow-scheduler-2436dafdbf-n5gqg --container=scheduler  -- sh -c "airflow users list"
Get a pod with a specific name
	kubectl get pods --all-namespaces -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | grep "airflow-webserver"
List all pods part of an application
	kubectl get pods --selector=app=nginxrc --output=jsonpath={.items..metadata.name}
Get all entities in a namespace
	kubectl get all -n minio-operator
List pending volume claims
	kubectl get pvc -n minio-tenant-1
Watch local-path provisioner logs
	kubectl -n local-path-storage logs -f -l app=local-path-provisioner
Get StorageClass
	kubectl get storageclasses
Get details of a StorageClass
	kubectl describe storageclasses <name>
Copy local file to running pod
	k cp hello.txt local-path-storage/local-path-provisioner-78776bfc44-pr677:/root
Run the shell of a container
	k exec --stdin --tty -n local-path-storage local-path-provisioner-78776bfc44-pr677 -- /bin/sh # --stdin and --ty can be replaced with -it
Copy file from pod to local
	k cp -n local-path-storage local-path-provisioner-78776bfc44-pr677:/root/hi.txt hi.txt
Get deployment configuration
	k get deployments.apps -n airflow airflow-webserver -o yaml
List API resources SHORTNAMES, APIVERSION, NAMESPACED and KIND
	kubectl api-resources
List pods IPs
	kubectl get pods -n develop -o wide
Get nodes details
	kubectl get nodes -o wide # NAME STATUS ROLES AGE VERSION INTERANL-IP EXTERNAL-IP OS-IMAGE KERNERL-VERSION CONTAINER-RUNTIME
Get cluster API server name and URL
	kubectl config view -o jsonpath='{"Cluster name\tServer\n"}{range .clusters[*]}{.name}{"\t"}{.cluster.server}{"\n"}{end}'
Get cluster API server URL
	kubectl config view -o jsonpath="{.clusters[?(@.name==\"$CLUSTER_NAME\")].cluster.server}"
Get token of default service account
	kubectl get secrets -o jsonpath="{.items[?(@.metadata.annotations['kubernetes\.io/service-account\.name']=='default')].data.token}"|base64 --decode
Get details of API server
	CLUSTER_NAME=$(kubectl config view -o jsonpath='{"Cluster name\tServer\n"}{range .clusters[*]}{.name}{"\t"}{.cluster.server}{"\n"}{end}' | sed 1d | sed 's/[ \t]\+/ /' | cut -d' ' -f 1)
	APISERVER=$(kubectl config view -o jsonpath="{.clusters[?(@.name==\"$CLUSTER_NAME\")].cluster.server}")
	MASTER_IP=$(echo $APISERVER | egrep -o '([0-9]{1,3}[.]){3}[0-9]{1,3}')
	TOKEN=$(kubectl get secrets -o jsonpath="{.items[?(@.metadata.annotations['kubernetes\.io/service-account\.name']=='default')].data.token}"|base64 --decode)
	curl -X GET $APISERVER/api --header "Authorization: Bearer $TOKEN" --insecure
Open shell in a specific container in a pod
	kubectl exec -it -n develop airflow-worker-0 --container=worker -- /bin/bash
List pods, containers and images
	kubectl get pods -n airflow -o json | jq '.items[] | . as $parent | .spec.containers[] | "\($parent.metadata.name);\(.name);\(.image)"' | column -s';' -t
List edge IPs
	kubectl get nodes -owide|grep edge
Describe a pod
	kubectl describe pod  -n kube-system tiller-deploy # no need to specify the entire pod name
Get list of deployments in the namespace superset
	kubectl get deploy -n superset
Get YAML configuration of a deployment
	kubectl get deploy -n superset my-superset -o yaml
Start k9s in a particular namespace
	k9s --namespace mynamespace
YAML configuration file object spec and status
	# spec -> desired object state, status -> current status updated by k8s
YAML configuration file object required fields
	# apiVersion, kind, metadata and spec
Dump the resource (CPU, memory) usage per namespace
	kubectl -n <namespace> top pod
List pod containers
	kubectl get pods -n <namespace> <pod> -o json | jq -r '. | .status.containerStatuses[] | .name'
List installed kubectl plugins
	kubectl krew list
Update the list of available kubectl plugins
	kubectl krew update
Install unused-volumes kubectl plugin
	kubectl krew install myplugin
List unused volumes
	kubectl describe -A pvc | grep -E "^Name:.*$|^Namespace:.*$|^Used By:.*$" | grep -B 2 "<none>" | grep -E "^Name:.*$|^Namespace:.*$" | cut -f2 -d: | paste -d " " - -
Clean up Pods in Evicted state
	kubectl get pods --all-namespaces -o wide | grep Evicted | awk '{print $1,$2}' | xargs -L1 kubectl delete pod -n
Clean up Pods in Error state
	kubectl get pods --all-namespaces -o wide | grep Error | awk '{print $1,$2}' | xargs -L1 kubectl delete pod -n
Clearing the Completed state of Pods
	kubectl get pods --all-namespaces -o wide | grep Completed | awk '{print $1,$2}' | xargs -L1 kubectl delete pod -n
Clean up unused PVs
	kubectl describe -A pvc | grep -E "^Name:.*$|^Namespace:.*$|^Used By:.*$" | grep -B 2 "<none>" | grep -E "^Name:.*$|^Namespace:.*$" | cut -f2 -d: | paste -d " " - - | xargs -n2 bash -c 'kubectl -n ${1} delete pvc ${0}'
Clear PVCs that are not bound
	kubectl get pvc --all-namespaces | tail -n +2 | grep -v Bound | awk '{print $1,$2}' | xargs -L1 kubectl delete pvc -n
Clear the PVs that are not bound
	kubectl get pv | tail -n +2 | grep -v Bound | awk '{print $1}' | xargs -L1 kubectl delete pv
