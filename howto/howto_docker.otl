Docker
	How to about Docker
List docker images
	docker images
Rename/tag image
	docker tag 4f3e2b44ea88 ballerina/ballerina-pizza:1.0
Rename image
	docker image tag neovimini:0.1 neovimini-core:0.1
Print detailed information about an image
	docker image inspect 4f3e2b44ea88
Run bash of an image
	docker run -ti -u `id -u $USER` -v `pwd`:/home/ballerina ballerina/ballerina-platform /bin/bash
Run image mapping a port
	docker run -d -p 9090:9090 pizza:latest
Dockerfile to modify existing image
    FROM golang:latest
    MAINTAINER Walter Di Carlo <walter@di-carlo.it>
    RUN echo "Hello Go" > ~/hello.txt
Build docker image
	docker build -t wdicarlo/golang:v1 .
Print image history/layers
	docker history wdicarlo/golang:v1
Check the personalized image
	do-docker-run cat /root/hello.txt
List all containers
	docker ps -a
Create a new image from a container
	docker commit 089a3e27346a wdicarlo_golang_hello
Export content of a container
	docker export --output=busybox-mkdir.tar d93201be1712
Delete an image
	docker rmi training/sinatra
Search for an image
	docker search golang
Run dockerized web site
	docker run -d --name mysite -P wdicarlo/httpd-mysite:v1
Stop container
	docker stop 0f9f27cedc75; docker stop mycontainer1
Remove (delete) a container
	docker rm ab0d93f9efb4
Inspect network bridge information
	docker network inspect bridge
Share volumes between containers
	docker run -d -p 80:80 --volumes-from myservice httpd
List networks
	docker network ls
Create a new network
	docker network create mynet
Inspect network details
	docker network inspect mynet 
Remove (delete) a network
	docker network rm mynet
List available network commands
	docker network
Run a container
	docker run -itd --name=mycontainer busybox
Attach to container to use its shell console (use enter key to get the prompt and ctrl-p ctrl-q to exit)
	docker attach mycontainer 
Commands to use in the containers's shell
    cat /etc/hosts; mount; ping 172.17.0.3 # don't use exit command otherwise the container get stopped
List running machines
    docker-machine ls
Docker bridge network (default)
    docker network inspect bridge
Create a dedicated container network
	docker run -itd --name=mycontainer3 --net=mynet debian
Remove (delete) a container and volume
	docker rm -v mycontainer1
Map all host ports into container ports
	docker run -d -P httpd:latest
Map specific host port to a container port
	docker run -d -p 80:5000 httpd:latest
List all exited containers
	docker ps -a -f status=exited
Remove (delete) all exited containers
	docker rm $(docker ps -a -f status=exited -q)
Stop all running containers
	docker stop $(docker ps -a -q)
Remove (delete) all images even if error are present
	docker rmi -f $(docker images -a -q)
Remove (delete) all images avoiding those ones if error are present
	docker rmi $(docker images -a -q)
List volumes not attached to containers
	docker volume ls -f dangling=true
Remove (delete) all detached volumes
	docker volume rm $(docker volume ls -f dangling=true -q)
Remove (delete) a container
	docker container rm myjenkins
Run container exposing port 8080 to 8888
	docker run -d --name myjenkins -p 8888:8080 jenkins/jenkins:lts
Print container logs
	docker logs myjenkins
Copy a file inside the docker
	docker cp ss.java myjenkins:/var/jenkins_home/jobs/
Restart container
	docker restart myjenkins
Get volume mount point of a running container
	docker inspect redis-rejson | grep Source
Run a command in a running container
	docker exec redis-rejson ps -eLF
Copy local file into a running container
	docker cp inventory.json mongo-server:/data/
Restart docker service
	sudo service docker restart
Example of nginx docker usage
	docker run --name datatable_demo -p 8888:80 -v $PROJECT_PATH/datatable_demo:/usr/share/nginx/html:ro -d nginx:alpine
Bypass ENTRYPOINT command
	docker run --entrypoint "/bin/sh" -i  myimage
Execute a terminal inside a running container
	docker exec -it sonarqube_cluster_sonarqube_1 bash
Stop all running containers
	docker stop $(docker ps -a -q)
Fast stop all running containers
	docker ps -a -q | xargs -n 1 -P 8 -I {} docker stop {} # parallel stop commands
Remove (delete) all containers
	docker rm $(docker ps -a -q)
Remove (delete) all containers and volumes
	docker rm -v $(docker ps -a -q)
Stop exited containers and delete only non-tagged images
	docker ps --filter 'status=Exited' -a | xargs docker stop docker images --filter "dangling=true" -q | xargs docker rmi 
Remove (delete) all containers that aren't currently running
	docker rm $(docker ps -a -q -f "status=exited*")
COPY vs ADD
  # Both commands can copy files from local host into the container
  # In addition, ADD allows to copy from an URL and to decompress an archive
  # Use COPY and use the ADD only if it is necessary to extract a local tar file
Download and uncompress an archive
  RUN curl http://mydomain.net/myarchive.tar.gz \
    | tar -xjC /tmp/ myarchive.tar.gz \
    && make -C /tmp/ myarchive.tar.gz
Print disk space used by docker
	docker system df
Remove (delete) unused data; containers, networks, images, cache
	docker system prune
Update image name and tag
	docker image tag mynvimi:0.0.1 neovim:0.5
List repository images
	docker image ls <repo>/<path>/<to>/<image>
Change repository, path and tag of an image
	docker tag ghcr.io/apache/airflow/v2-1-test/prod-build/python3.6:latest <myrepo>/<path>/<to>/<my-airflow>/airflow:0.1.0
Push an image
	docker push <myrepo>/<path>/<to>/<my-airflow>/airflow:0.1.0
Delete all images related to a topic
	docker images | grep airflow |sed 's/[ \t]\+/ /g' | cut -d' ' -f3 | xargs -I@ docker rmi -f @
Sort images by size
	docker images --format "{{.ID}}\t{{.Size}}\t{{.Repository}}\t{{.Tag}}" | sort -k 2 -h | column -t
