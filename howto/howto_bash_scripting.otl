bash scripting howto
   LIst of bash scripting how to

# First line identification
   #!/usr/bin/env bash

# Support Functions 
   yell() { echo "$0: $*" >&2; }
   die() { yell "$*"; exit 111; }
   try() { "$@" || die "cannot $*"; }

# Check it is used correctly   
   if [ -t 0 ]; then
       # 0:     stdin  
       # 1:     stdout  
       # 2:     stderr
       cmd=`basename $0`
       echo "Usage: $cmd must be used in a pipe"
       exit
   fi

# Check if it used in a pipe
   if [ -t 1 ]; then # check if piping to output stream
      piping=0
      quiet=0
   fi

# Check needed commands
   CMD_NAME="debootstrap"
   cmd=`which $CMD_NAME`
   if [ -z "$cmd" ]; then
       echo "Missing $CMD_NAME command"
       exit
   fi

# Usage help function
   cmd=$(basename $0)

   function usage() {
	   echo "Usage: $cmd [-h]"
	   echo "where:"
	   echo "       -h                          : print this help"
   }

# Arguments processing for sources script
   OPTIND=1 # reset getopts pointer when sourcing the script (https://stackoverflow.com/a/23615586/3676996)
   while getopts h flag
   do
   case $flag in
	  h)
		  usage
		  return
		  ;;
	  ?)
		  usage
		  return
		  ;;
	   esac
   done
   shift $(( OPTIND - 1 ))  # shift to the last flag or argument

   if [ $# == 0 ]; then
	   usage
	   exit
   fi

# Usage help function
   cmd=`basename $0`

   function usage() {
       echo "Usage: $cmd [-h] [-q] [-s <val>] [-n] [-v] <arg> [-f]"
       echo "where:"
       echo "       -h                          : print this help"
       echo "       -n                          : dry run"
       echo "       -s <val>                    : use <val>"
       echo "       -f                          : force"
       echo "       -v                          : verbose"
       echo "       -q                          : quiet"
   }

# Evaluate command help function
   function evalcmd() {
     [ "$cmd" == "" ] && return
     if [ $quiet -eq 0 ]; then
   	echo "> $cmd"
     fi
     if [ $dryrun -eq 0 ]; then
   	eval "$cmd"
     fi
   }

# Arguments processing
   quiet=0
   force=0
   exclude=""
   dryrun=0
   verbose=0
   OPTIND=1 # reset getopts pointer when sourcing the script (https://stackoverflow.com/a/23615586/3676996)
   while getopts hqnve:f flag
   do
   case $flag in
      f)
          force=1
          ;;
      v)
          verbose=1
          ;;
      q)
          quiet=1
          ;;
      n)
          dryrun=1
          ;;
      e)
          exclude=$OPTARG
          ;;
      h)
          usage
          exit
          ;;
      ?)
          usage
          exit
          ;;
       esac
   done
   shift $(( OPTIND - 1 ))  # shift to the last flag or argument

   if [ $# == 0 ]; then
       usage
       exit
   fi
   arg="$1"

# Test environment variable
   if [ "$WEB_HOME" == "" ]; then
      echo "Missing WEB_HOME environment variable"
      exit
   fi

# Request user confirmation
   if [ $force -eq 0 ]; then
      read -p "Are You Sure? <y|n>" ans
      if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
         echo "Confirmed!!!"
      else
         echo "Aborted!!!"
         exit
      fi
   fi

# Quieting command output
   if [ $verbose -eq 1 ]; then
       usage|head -1
   fi
   if [ $quiet -eq 0 ]; then
       echo "> $cmd"
   fi
   if [ $dryrun -eq 0 ]; then
       eval "$cmd"
   fi
# Array manipulation
   declare -A myarr
   mykey="k1"
   myarr["demo"]="done"
   myarr[$mykey]="na"
   myval="${myarr[$mykey]}"
   readarray -t myarr < "$1" # readarray reads also the trailing newline in each array element. Use the -t option to strip them. 
   echo "${myarr[*]}"
   printf '%s ' "${myarr[*]}"
   printf '%s ' "${myarr[@]}"
   local str
   printf -v str ' %s' "${myArray[@]}"  # save to variable str without printing
   printf '%s' "${str:1}"  # to remove the leading space 
# more array manipulation (https://stackoverflow.com/a/10586169)
	string="Paris, France, Europe"
	IFS=', ' read -r -a array <<< "$string"
	echo "${array[0]}"
	for element in "${array[@]}"
	do
		echo "$element"
	done
	for index in "${!array[@]}"
	do
		echo "$index ${array[index]}"
	done
    # Bash arrays are sparse -> indices are not contiguous.
	unset "array[1]"
	array[42]=Earth
	echo "${#array[@]}" # number of array elements -> you shouldn't use the length to get the last element
	echo "${array[-1]}" # last element
	echo "${array[@]: -1:1}" # last element (old version). note the needed space after :
# docs as code
    #!/usr/bin/env bash
    # Example of Documentation as Code
    # see https://developers.redhat.com/blog/2017/06/21/documentation-as-code/

    if [ $# -eq 0 ]; then
     echo "$(basename $0) [run|doc]"
    fi

    case $1 in
     run)

    echo "Here goes the code to run"
     exit
     ;;

    doc)

    sed '/^:/,/^DAC/!d;s/^:/cat/' "$0" | bash -s "$@"
     exit
     ;;

    *) exit
     ;;
    esac


    : <<DACv1
    ## Documentation Starts

    Here you can add all the needed markdown documentation. You can split it as shown in this script.
    DACv1

    : <<\DACv2
    ### Documentation Continues
    Here goes the documentation example with a table:

    1 | 2 | 3 | 4 | 5
    ---|---|---|---
    T | H | I | S |
    I | S |   | A |
    T | A | B | L | E
    DACv2

# [[ is bash's improvement to the [ command.
	# must use #!/bin/bash shebang line
	# no longer have to quote variables
	# can use && and || operators for boolean tests and < and > for string comparisons
	# can use =~ operator for doing regular expression matches
	# get pattern matching aka globbing for free
	# prevents word splitting of variable values
