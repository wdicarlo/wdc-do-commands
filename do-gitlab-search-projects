#!/usr/bin/env bash

cmd=`basename $0`

function usage() {
	echo "Usage: $cmd [-h] [-p <num_pages>] [-s <sec_to_sleep>] [-q] [-n] [-g <gitlab_server_domain>] [-t <gitlab_token>] [-i <group_id>] [<search_topic>]"
	echo "where:"
    echo "       -t <gitlab_token>           : gitlab token to overwrite the value in TOKEN"
    echo "       -g <gitlab_server_domain>   : gitlab server domain to overwrite the value in GITLAB_SERVER"
	echo "       -s <sec_to_sleep>           : seconds to sleep after each request"
	echo "       -i <group_id>               : group ID to start search from to overwrite the value in GITLAB_GROUPID"
	echo "       -p <num_pages>              : number of pages to retrieve"
	echo "       -h                          : print this help"
	echo "       -q                          : quiet"
	echo "       -n                          : dry run"
}


quiet=0
dryrun=0
pages=1
seconds=0
while getopts hqnp:s:g:t:i: flag
do
	case $flag in
		i)
			GITLAB_GROUPID=$OPTARG
			;;
		t)
			TOKEN=$OPTARG
			;;
		g)
			GITLAB_SERVER=$OPTARG
			;;
		s)
			seconds=$OPTARG
			;;
		p)
			pages=$OPTARG
			;;
		n)
			dryrun=1
			;;
		q)
			quiet=1
			;;
		h)
			usage
			exit
			;;
		?)
			usage
			exit
			;;
	esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

if [ "$GITLAB_SERVER" == "" ]; then
    echo "GITLAB_SERVER not defined"
    exit
fi

if [ "$GITLAB_GROUPID" == "" ]; then
    echo "GITLAB_GROUPID not defined"
    exit
fi

if [ "$TOKEN" == "" ]; then
    echo "Missing TOKEN value"
    exit
fi

token="PRIVATE-TOKEN: $TOKEN"
url_groups="https://$GITLAB_SERVER/api/v4/groups"
groupid="$GITLAB_GROUPID"
search="$1"

for counter in $(seq 1 $pages);
do
    cmd="curl -Ss --header \"$token\" \"$url_groups/$groupid/-/search?page=$counter&per_page=100&scope=projects&simple=true&search=$search\""
    if [ $quiet -eq 0 ]; then
       echo "> $cmd"
    fi
    if [ $dryrun -eq 0 ]; then
           eval "$cmd | jq .[]"
    fi
    if [ $counter -lt $pages ] && [ $seconds -gt 0 ]; then
        if [ $quiet -eq 0 ]; then
           echo "waiting $seconds secs..."
        fi

        sleep $seconds
    fi
done | jq -s '.'
