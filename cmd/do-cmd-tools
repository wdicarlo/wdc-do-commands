#!/usr/bin/env bash

# create patch file with:
# $ diff -Naru git/git-filter-repo git/do-git-filter-repo > git/do-git-filter-repo.patch
# edit the patch file to reference only the cmd

# TODO: support tools installation through bash script
# ex. curl https://raw.githubusercontent.com/helm/chartmuseum/main/scripts/get-chartmuseum | bash

[ "$WDC_DO_COMMANDS_BIN" == "" ] && echo "Missing WDC_DO_COMMANDS_BIN" && exit

tools_file="$WDC_DO_COMMANDS_BIN/do_cmd_tools.csv"

[ ! -f "$tools_file" ] && echo "Missing $tools_file" && exit

# Usage help function
cmd=`basename $0`

function usage() {
  echo "Usage: $cmd [-h] [-n] [-f] [-G <group>] [-g <command>] [-e] [-t <target-dir>]"
  echo "where:"
  echo "       -h                          : print this help"
  echo "       -n                          : dry run"
  echo "       -e                          : edit CSV of tools"
  echo "       -f                          : force the update"
  echo "       -G <group>                  : group tools to consider"
  echo "       -g <command>                : do command to consider"
  echo "       -t <target-dir>             : use target dir"
}

# Arguments processing
dryrun=0
force=0
tgroup=""
dcmd=""
tdir=""
while getopts hnfG:g:et: flag
do
  case $flag in
    t)
      tdir="$OPTARG"
      ;;
    g)
      dcmd="$OPTARG"
      ;;
    G)
      tgroup="$OPTARG"
      ;;
    e)
      vim "$WDC_DO_COMMANDS_BIN/do_cmd_tools.csv" < /dev/tty
      exit
      ;;
    f)
      force=1
      ;;
    n)
      dryrun=1
      ;;
    h)
      usage
      exit
      ;;
    ?)
      usage
      exit
      ;;
  esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

[ ! "$tdir" == "" ] && mkdir -p "$tdir"

cd "$WDC_DO_COMMANDS_DIR"

if [ ! "$tgroup" == "" ]; then
  [ $(cat "$WDC_DO_COMMANDS_BIN/do_cmd_groups.csv" | cut -d';' -f 1 | grep -c "^$tgroup$") -ne 1 ] \
    && echo "Invalid group: $tgroup" && exit 
  [ $(cat "$WDC_DO_COMMANDS_BIN/do_cmd_groups.csv" | grep -c "^$tgroup;yes") -eq 0 ] \
    && echo "Inactive commands group: $tgroup" && exit
fi

[ "$dcmd" == "" ] && dcmd="^"
cat "$tools_file" | sed 1d | grep "^$tgroup"| grep "$dcmd" | while IFS=',' read -r CMD URL PATCH
do
  group=$(echo "$CMD" | cut -d '/' -f 1)
  ntokens=$(echo "$CMD" | sed 's#/# #g' | wc -w )
  [ ! -d "$group" ] && [ $ntokens -gt 1 ] && echo "Skipping for unknown command group: $group" && continue
  active=$(cat "$WDC_DO_COMMANDS_BIN/do_cmd_groups.csv" | grep -c "^$group;yes")
  [ "$group" == "bin" ] && active=1
  [ $ntokens -eq 1 ] && active=1 # don't need a group
  [ $active -eq 0 ] && echo "Skipping for inactive command group: $group" && sed -i "/^$(echo $CMD|sed 's#/#\\\/#g')/d" .gitignore && continue

  [ ! "$tdir" == "" ] && CMD="$tdir/$CMD"
  [ -f "$CMD" ] && [ $force -eq 0 ] && echo "Skipping existing command: $CMD" && continue

  cmd="NO_PROXY=\"$NO_PROXY\" curl -sSL $URL -o $CMD --create-dirs"
  echo "> $cmd"
  [ $dryrun -eq 0 ] && eval "$cmd"

  [ ! -f "$CMD" ] && echo "Missing $CMD" && continue

  [ $dryrun -eq 0 ] && chmod u+x "$CMD"

  if [ ! "$PATCH" == "" ]; then
    [ ! -f "$PATCH" ] && echo "Missing $PATCH" && exit
    DEST=$(cat "$PATCH" | grep +++ | cut -d' ' -f2)
    [ $dryrun -eq 0 ] && [ ! "$DEST" == "$CMD" ] && rm "$DEST"
    cmd="patch -p0 < \"$PATCH\""
    echo "> $cmd"
    [ $dryrun -eq 0 ] && eval "$cmd"
    [ $dryrun -eq 0 ] && chmod u+x "$DEST"
  fi
  [ $dryrun -eq 0 ] && [ -f "$CMD" ] && [ $(cat .gitignore|grep -c "$CMD") -eq 0 ] && echo "$CMD" >> .gitignore
  [ $dryrun -eq 0 ] && [ -f "$CMD" ] && chmod u+x "$CMD"
done | tee >(grep "> curl" | wc -l) # count number of downloaded tools
