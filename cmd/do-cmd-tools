#!/usr/bin/env bash

# create patch file with:
# $ diff -Naru git/git-filter-repo git/do-git-filter-repo > git/do-git-filter-repo.patch
# edit the patch file to reference only the cmd

tools_file="$WDC_DO_COMMANDS_BIN/do_cmd_tools.csv"

[ ! -f "$tools_file" ] && echo "Missing $tools_file" && exit

# Usage help function
cmd=`basename $0`

function usage() {
  echo "Usage: $cmd [-h] [-n] [-f] [-g]"
  echo "where:"
  echo "       -h                          : print this help"
  echo "       -n                          : dry run"
  echo "       -f                          : force the update"
  echo "       -g                          : group tools to consider"
}

# Arguments processing
dryrun=0
force=0
tgroup=""
while getopts hnfg: flag
do
  case $flag in
    g)
      tgroup="$OPTARG"
      ;;
    f)
      force=1
      ;;
    n)
      dryrun=1
      ;;
    h)
      usage
      exit
      ;;
    ?)
      usage
      exit
      ;;
  esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument
cd "$WDC_DO_COMMANDS_DIR"

if [ ! "$tgroup" == "" ]; then
  [ $(cat do_cmd_groups.csv | cut -d';' -f 1 | grep -c "^$tgroup$") -ne 1 ] \
    && echo "Invalid group: $tgroup" && exit 
  [ $(cat do_cmd_groups.csv | grep -c "^$tgroup;yes") -eq 0 ] \
    && echo "Inactive commands group: $tgroup" && exit
fi

[ "$tgroup" == "" ] && tgroup="^"
cat "$tools_file" | sed 1d | grep "^$tgroup"| while IFS=',' read -r CMD URL PATCH
do
  [ -f "$CMD" ] && [ $force -eq 0 ] && echo "Skipping existing command: $CMD" && continue
  group=$(echo "$CMD" | cut -d '/' -f 1)
  ntokens=$(echo "$CMD" | sed 's#/# #g' | wc -w )
  [ ! -d "$group" ] && [ $ntokens -gt 1 ] && echo "Skipping for unknown command group: $group" && continue
  active=$(cat "do_cmd_groups.csv" | grep -c "^$group;yes")
  [ $ntokens -eq 1 ] && active=1 # don't need a group
  [ $active -eq 0 ] && echo "Skipping for inactive command group: $group" && sed -i "/^$(echo $CMD|sed 's#/#\\\/#g')/d" .gitignore && continue
  cmd="curl -sS $URL > $CMD"
  echo "> $cmd"
  [ $dryrun -eq 0 ] && eval "$cmd"

  if [ ! "$PATCH" == "" ]; then
    [ ! -f "$PATCH" ] && echo "Missing $PATCH" && exit
    cmd="patch -p0 < \"$PATCH\""
    echo "> $cmd"
    [ $dryrun -eq 0 ] && eval "$cmd"
  fi
  [ -f "$CMD" ] && [ $(cat .gitignore|grep -c "$CMD") -eq 0 ] && echo "$CMD" >> .gitignore
done | tee >(grep "> curl" | wc -l) # count number of downloaded tools
