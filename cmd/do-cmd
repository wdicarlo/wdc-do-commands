#!/bin/bash

set -e

[ "$DEBUG" = "true" ] && set -x

cmd=$(basename $0)

function usage() {
  echo "Usage: $cmd [-h] [-c <command>] [-d <oci-container>:<tag> [-b|-B] [-s] [-m <path>]"
  echo "where:"
  echo "       -h                          : print this help"
  echo "       -c <command>                : command to execute instead of bash"
  echo "       -d <oci-container:<tag>     : container to use instead of default"
  echo "       -p                          : use host PROJECTS path"
  echo "       -s                          : use host shared path"
  echo "       -m <path>                   : use host more commands path"
  echo "       -b                          : re-build the image using the cache"
  echo "       -B                          : re-build the image without using the cache"
  echo "Optional environment variables:"
  echo "  TAG                  - Container tag to use instead of default"
  echo "  DOCKER_CONTAINER     - Container to use instead of default"
  echo "  DOCKER_PULL          - Pull container from registry. Default: \"true\""
  echo "  DOCKER_COMMAND       - Command to run on Docker container instead of /bin/bash"
  echo "  EXTRA_PARAMETERS     - Extra parameters to pass to docker run"
  echo "  DOCKER_SOCK          - Path to docker socket. Default: /var/run/docker.sock"
  echo "  BASE_HOME            - Home path to use instead of \$HOME"
  echo "  SSH_HOME             - SSH home path to use instead of \$HOME/.ssh"
}

function cache_do_commands() {
  for dcmd in $(git ls-files)
  do
    tdir=$(dirname "$WDC_DO_COMMANDS_DIR/.cache/wbin/$dcmd")
    [ ! -d "$tdir" ] && mkdir -p "$tdir"
    cmd="cp $WDC_DO_COMMANDS_DIR/$dcmd $WDC_DO_COMMANDS_DIR/.cache/wbin/$dcmd"
    echo "> $cmd"
    eval "$cmd"
  done
}
function cache_vim_plugins() {
  for plug in $(cat $WDC_DO_COMMANDS_DIR/bin/do_vim_plugs.csv|cut -d'/' -f2)
  do
    [ ! -d "$HOME/.vim/plugged/$plug" ] && echo "Missing plugin: $plug" && continue
    cmd="cp -r $HOME/.vim/plugged/$plug $WDC_DO_COMMANDS_DIR/.cache/vim/plugged/"
    echo "> $cmd"
    eval "$cmd"
  done
  cmd="cp -r $HOME/.vim/autoload/plug.vim $WDC_DO_COMMANDS_DIR/.cache/vim/autoload/"
  eval "$cmd"
}
function unpack_neovim() {
  # unpack neovim
  [ ! -f "$WDC_DO_COMMANDS_DIR/.cache/bin/bin/nvim" ] && return
  mkdir -p "$WDC_DO_COMMANDS_DIR/.cache/neovim"
  cmd="mv $WDC_DO_COMMANDS_DIR/.cache/bin/bin/nvim $WDC_DO_COMMANDS_DIR/.cache/neovim/nvim.appimage"
  echo "> $cmd"
  eval "$cmd"
  cd "$WDC_DO_COMMANDS_DIR/.cache/neovim"
  ./nvim.appimage --appimage-extract # create squashfs-root/usr/
  cd "$WDC_DO_COMMANDS_DIR"
}
function cache_cmd_tools() {
  for tool in $(cat "$WDC_DO_COMMANDS_DIR/bin/do_cmd_tools.csv" | sed 1d | grep "^CURL," | cut -d ',' -f2)
  do
    [ ! -f "$WDC_DO_COMMANDS_DIR/$tool" ] && echo "Missing tool: $tool" && continue
    tdir=$(dirname "$WDC_DO_COMMANDS_DIR/.cache/bin/$tool")
    [ ! -d "$tdir" ] && mkdir -p "$tdir"
    cmd="cp $WDC_DO_COMMANDS_DIR/$tool $WDC_DO_COMMANDS_DIR/.cache/bin/$tool"
    echo "> $cmd"
    eval "$cmd"
  done
}

DOCKER_COMMAND="${DOCKER_COMMAND:-"/bin/bash"}"

# Arguments processing
projects=0
build=0
shared=0
mbin_path=""
while getopts hc:d:pbBsm: flag
do
  case $flag in
    B)
      build=2
      ;;
    b)
      build=1
      ;;
    p)
      projects=1
      ;;
    s)
      shared=1
      ;;
    m)
      mbin_path="$OPTARG"
      ;;
    c)
      DOCKER_COMMAND="$OPTARG"
      ;;
    d)
      DOCKER_CONTAINER="$OPTARG"
      ;;
    h)
      usage
      exit
      ;;
    ?)
      usage
      exit
      ;;
  esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

HOST_PATH="$(pwd -P)"

cd "$WDC_DO_COMMANDS_DIR"

this_path="$(realpath $(dirname "${BASH_SOURCE[0]}" ))"
ver=$(git tag | sort -rV | head -1)
branch=$(git rev-parse --abbrev-ref HEAD)
postfix="" && [ $(git diff $ver..$branch|wc -l) -gt 0 ] && postfix="-dev"
if test -z "$DOCKER_CONTAINER"; then
  GIT_TAG="$(echo $ver|tr -d 'v')$postfix"
  TAG="${TAG:-$GIT_TAG}"
else
    TAG="${TAG:-$(echo "$DOCKER_CONTAINER" | cut -d':' -f2)}"
fi

DOCKER_CONTAINER="${DOCKER_CONTAINER:-wdc-do-commands:$TAG}"
LATEST="${DOCKER_CONTAINER:-wdc-do-commands:latest}"

if [ $build -ge 1 ]; then
  if [ ! "$WDC_DO_COMMANDS_DIR" == "" ]; then
    cur_dir=$(pwd)
    \cd "$WDC_DO_COMMANDS_DIR" >/dev/null 2>&1 
    if [ -f "./Dockerfile" ]; then
      OCI_OPTS=""
      rm -rf "$WDC_DO_COMMANDS_DIR/.cache" > /dev/null 2>&1
      mkdir -p "$WDC_DO_COMMANDS_DIR/.cache/wbin/"
      mkdir -p "$WDC_DO_COMMANDS_DIR/.cache/vim/plugged"
      mkdir -p "$WDC_DO_COMMANDS_DIR/.cache/vim/autoload"
      mkdir -p "$WDC_DO_COMMANDS_DIR/.cache/bin/"
      mkdir -p "$WDC_DO_COMMANDS_DIR/.cache/bats-core/"
      if [ $build -eq 1 ]; then
        cache_do_commands
        cache_vim_plugins
        cache_cmd_tools
      else
        OCI_OPTS="--no-cache"
        NO_PROXY="$NO_PROXY,.github.com" git clone https://github.com/bats-core/bats-core.git .cache/bats-core 
        NO_PROXY="$NO_PROXY,.github.com" git clone --single-branch --branch master https://github.com/wdicarlo/wdc-do-commands.git ./.cache/wbin
        NO_PROXY="$NO_PROXY,.githubusercontent.com" curl -fLo "$WDC_DO_COMMANDS_DIR/.cache/vim/autoload/plug.vim" --create-dirs \
          https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        NO_PROXY="$NO_PROXY,.github.com" ./vim/do-vim-plugs -t "$WDC_DO_COMMANDS_DIR/.cache/vim/plugged/" -p ./bin/do_vim_plugs.csv
        NO_PROXY="$NO_PROXY,.github.com" ./cmd/do-cmd-tools -f -t "$WDC_DO_COMMANDS_DIR/.cache/bin"
      fi
      unpack_neovim

      docker build $OCI_OPTS -t ${DOCKER_CONTAINER} .
      docker tag ${DOCKER_CONTAINER} ${LATEST}
    else
      echo "Missing Dockerfile"
    fi
    \cd "$cur_dir" >/dev/null 2>&1
  else
    echo "Missing WDC_DO_COMMANDS_DIR"
  fi
fi

BASE_HOME="${BASE_HOME:-"$HOME"}"
SSH_HOME="${SSH_HOME:-"${BASE_HOME}/.ssh"}"

if ( [[ "${TAG}" = latest* ]] && [ "${DOCKER_PULL}" != 'false' ] ) || [ "${DOCKER_PULL}" = 'true' ]; then
    docker pull "${DOCKER_CONTAINER}"
fi

#export CLI_PROMPT="${CLI_PROMPT:-"$(basename $(pwd)):\\w$"}"

docker_args=()

#env_regex="(DO_.*=|CLI_.*=)"
#while read -r line; do
#  docker_args+=(-e "${line}")
#done < <(env | grep -E "${env_regex}")
cur_prj="$(echo ${HOST_PATH:$((${#PROJECTS}+1))} | cut -d'/' -f 1)"
MOUNT_HOST_PATH="" && [ "$cur_prj" == "" ] && MOUNT_HOST_PATH="-v ${HOST_PATH}:/home/dockeruser/host"
MOUNT_HOST_PROJECTS="" && [ ! "$cur_prj" == "" ] && MOUNT_HOST_PROJECTS="-v ${PROJECTS}/${cur_prj}:/home/dockeruser/projects/${cur_prj}"
[ $projects -eq 1 ] && MOUNT_HOST_PROJECTS="-v $PROJECTS:/home/dockeruser/projects"
MOUNT_HOST_SHARED="" && [ $shared -eq 1 ] && MOUNT_HOST_SHARED="-v /media/shared/:/media/shared"
MOUNT_HOST_MBIN="" && [ ! "$mbin_path" == "" ] && MOUNT_HOST_MBIN="-v $mbin_path:/home/dockeruser/mbin"

cmd="docker run -it --rm \
${EXTRA_PARAMETERS:-} \
${docker_args[@]:-} \
-e \"CUR_UID=$(id -u)\" \
-e \"CUR_GID=$(id -g)\" \
${MOUNT_HOST_PATH} \
${MOUNT_HOST_PROJECTS} \
${MOUNT_HOST_SHARED} \
${MOUNT_HOST_MBIN} \
-v \"${SSH_HOME}:/home/dockeruser/.ssh\" \
-v \"${BASE_HOME}/.bash_history:/home/dockeruser/.bash_history\" \
-v \"${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock\" \
${DOCKER_CONTAINER} \
${DOCKER_COMMAND}"

#docker run -it --rm \
#    $EXTRA_PARAMETERS \
#    "${docker_args[@]}" \
#    -e "CUR_UID=$(id -u)" \
#    -e "CUR_GID=$(id -g)" \
#    -v $(pwd -P):/home/dockeruser/host \
#    ${MOUNT_HOST_PROJECTS} \
#    ${MOUNT_HOST_SHARED} \
#    ${MOUNT_HOST_MBIN} \
#    -v "${SSH_HOME}:/home/dockeruser/.ssh" \
#    -v "${BASE_HOME}/.bash_history:/home/dockeruser/.bash_history" \
#    -v "${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock" \
#    "${DOCKER_CONTAINER}" \
#    "${DOCKER_COMMAND}"

echo "> $cmd"
eval "$cmd"
