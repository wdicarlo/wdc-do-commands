#!/usr/bin/env bash

bin_dir=`echo $WDC_DO_COMMANDS_DIR`


function usage() {
    echo "Usage: $cmd [-f] [-r] [-m \"message\"] <improved-bin-cmd>"
    echo "where:"
    echo "            -f          : update file (defualt update command)"
    echo "            -r          : avoid review of changes before to update"
    echo "            -m          : message to append to the standard message"
}

quiet=0
file=0
review=1
message=""
while getopts hqfrm: flag
do
	case $flag in
		m)
			message="$OPTARG"
			;;
		r)
			review=0
			;;
		q)
			quiet=1
			;;
		f)
			file=1
			;;
		h)
			usage
			exit
			;;
		?)
			usage
			exit
			;;
	esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

cd $bin_dir


if [ ! $# -eq 1 ]; then
    usage
    exit
fi

cmd=""
if [ $file -eq 0 ]; then
  cmd="${1}"
  [ ! "$cmd" == "_d" ] && cmd=$(git ls-files | grep "do[-_]*" | grep "$1" | sed "s#^$WDC_DO_COMMANDS_DIR/##" )
  [ ! -f "$cmd" ] && echo "The selected file/s does not exists or more than one has been selected: $(echo $cmd|tr '\n' ' ')" && exit
  [ $(file $cmd|grep -c "text executable") -eq 0 ] && [ $file -eq 0 ] && echo "Not a script, please provide the relative path to the script or use -f option for text files" && exit 
else
  cmd="${1}"
  [ ! -f "$cmd" ] && cmd=$(find "${bin_dir}/" -type f | grep -v "\.sav$" | grep -v "\/\.cache\/" | grep "$1" | sed "s#^$WDC_DO_COMMANDS_DIR/##" )
  [ ! -f "$cmd" ] && echo "The selected file/s does not exists or more than one has been selected: $(echo $cmd|tr '\n' ' ')" && exit
fi

# TODO: check if the command is already present in the git repository
# check if the command has changes
n=$(git diff $cmd | wc -l)
if [ $n -eq 0 ]; then
    echo "Command without changes: $cmd"
    exit
fi

if [ $review -eq 1 ]; then
	do-git-diff -q $cmd | do-pipe-to-vim -o $cmd
    read -p "Do you Accept the Changes? <Yy|n> (Y to specify a commit message) " ans
	if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
    [ "$ans" == "Y" ] && echo "Message? [$msg]" && read -p "" message
		echo "Changes accepted!!!"
	else
		exit
	fi
fi

git add $cmd

msg=""
if [ $file -eq 0 ]; then
    msg="Improved $cmd command."
else
    msg="Update $cmd file."
fi

[ ! "$message" == "" ] && msg="$msg ${message^}"

git commit -m "$msg"
