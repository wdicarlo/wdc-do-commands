#!/usr/bin/env bash

# Usage help function
cmd=`basename $0`

stdfilter="^cd\|^ls\|^vi"
function usage() {
  echo "Usage: $cmd [-h] [-a] [-A] [-f] [-e] [-s] [<filter-pattern>]"
  echo "where:"
  echo "       -h                          : print this help"
  echo "       -a                          : consider project and global commands"
  echo "       -A                          : consider ALL commands"
  echo "       -s                          : sort commands"
  echo "       -f                          : filter commands $stdfilter"
  echo "       -e                          : exe command in the history"
}

# Arguments processing
sort=""
global=0
filter=""
exe=0
while getopts hasifeA flag
do
  case $flag in
    f)
      filter="| grep -v \"$stdfilter\""
      ;;
    e)
      exe=1
      ;;
    A)
      global=2
      ;;
    a)
      global=1
      ;;
    s)
      sort="| sort"
      ;;
    h)
      usage
      exit
      ;;
    ?)
      usage
      exit
      ;;
  esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

[ "$PROJECTS" == "" ] && PROJECTS="$HOME"

HISTCMDS_FILE="${HOME}/.bash_commands"
[ "$(echo ${PWD:0:${#PROJECTS}})" == "${PROJECTS}" ] && HISTCMDS_FILE="${PROJECTS}/$(echo ${PWD:$((${#PROJECTS}+1))} | cut -d'/' -f 1)/.bash_commands"

[ $global -eq 1 ] && [ ! "$HISTCMDS_FILE" == "${HOME}/.bash_commands" ] && HISTCMDS_FILE="$HISTCMDS_FILE ${HOME}/.bash_commands"

if [ $global -eq 2 ]; then
  cmd="cat $HOME/.bash_commands \$(find $PROJECTS -type f -name .bash_commands) | sort | uniq"
  [ ! "$1" == "" ] && cmd="$cmd | grep \"$1\""
  [ ! "$(which fzf)" == "" ]  && cmd="$cmd | fzf"
  echo "> $cmd"
  eval "$cmd"
  exit
fi

if [ $exe -eq 0 ]; then
  cmd="cat \"${HISTCMDS_FILE}\" $sort $filter"
  [ ! "$1" == "" ] && cmd="cat ${HISTCMDS_FILE} | grep \"$1\" $sort"
  echo "> $cmd"
  eval "$cmd"
  exit
fi

if [ ! "$(which fzf)" == "" ]; then
  cmd="$(cat ${HISTCMDS_FILE} | fzf)"
  echo "> $cmd"
  eval "$cmd"
  exit
fi

n=0
if [ $# == 1 ]; then
    n=$(cat ${HISTCMDS_FILE} | grep "$1" | awk '{ print NR, $0 }' | wc -l)
    cat ${HISTCMDS_FILE} | grep "$1" | awk '{ print NR, $0 }'| less -EF 
else
    n=$(cat ${HISTCMDS_FILE} | awk '{ print NR, $0 }' | wc -l)
    cat ${HISTCMDS_FILE} | awk '{ print NR, $0 }'| less -EF
fi

num=-1
if [ "$n" -eq 0 ]; then
    echo "Command/s not found!!!"
    exit
fi

if [ "$n" -eq 1 ]; then
    num=1
else
    read -p "Command Num: " num
fi

if [ "$num" == "" ]; then
    exit
fi

cmd=""
if [ $# -eq 1 ]; then
    cmd=$(cat ${HISTCMDS_FILE} | grep "$1" | awk '{print NR,$0}'|grep "^$num "| cut -d' ' -f2-)
else
    cmd=$(cat ${HISTCMDS_FILE} | awk '{print NR,$0}'|grep "^$num "|cut -d' ' -f2-)
fi
echo "> $cmd"
eval "$cmd"
