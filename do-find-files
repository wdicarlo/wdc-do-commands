#!/bin/bash

# TODO: find files newer then a specified date
# touch -t `date +%m%d0000` /tmp/$$
# find /tmefndr/oravl01 -type f -newer /tmp/$$
# rm /tmp/$$

cmd=`basename $0`

function usage() {
    echo "Usage: $cmd [-q] [-i] [-r <root>] [-n <depth>] [-s <size-filter>] <file-pattern>"
    echo "where:"
    echo "       -q                 : quiet"
    echo "       -v                 : verbose"
    echo "       -i                 : ignore case"
    echo "       -r <root>          : start from <root> folder"
    echo "       -f <filter>        : filter result with grep <filter>"
    echo "       -n <depth>         : max <depth> to search into"
    echo "       -s <size-filter>   : filter for file size:"
    echo "                             [-+]<val>[cwbkMG]"
    exit
}

if [ $# == 0 ]; then
    usage
    exit
fi

pars="-Hn"
root=""
file="*"
depth=99
quiet=0
verbose=0
if [ ! -t 1 ]; then
    # stdout is not the terminal, so be quiet
    quiet=1
fi
while getopts qir:n:f:s:v flag
do
    case $flag in

        s)
            size=$OPTARG
            ;;
        v)
            verbose=1
            ;;
        q)
            quiet=1
            ;;
        i)
            pars+="i"
            ;;
        r)
            root="$root $OPTARG"
            ;;
        f)
            filter=$OPTARG
            ;;
        n)
            depth=$OPTARG
            ;;
        ?)
            usage
            exit
            ;;
    esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

if [ -n "$1" ]; then
    file="$1"
fi

if [ "$root" == "" ]; then
    root="."
fi

cmd="find $root -maxdepth \"$depth\" \( -type d -name .git -prune -o -type d -name .svn -prune \) -o -type f -name \"$file\" -print 2>/dev/null"
if [ -n "$size" ]; then
    cmd="$cmd -size \"$size\" "
fi
if [ -n "$filter" ]; then
    cmd="$cmd | grep --color $pars $filter "
fi
if [ -n "$size" ]; then
    cmd="$cmd | xargs -I@ ls -lh @  | awk '{ printf \"%-5s  %-60s\n\", \$5, \$9}'"
fi
if [ $verbose -eq 1 ]; then
    quiet=0
fi
if [ $quiet -eq 0 ]; then
    echo "> $cmd"
fi
eval $cmd
