#!/usr/bin/env bash

cmd=`basename $0`

function usage() {
    echo "Usage: $cmd [-h] [-l] [-a] [-b <branch>] [-c <log_grep_pattern>] [-n] [<grep_pattern>]"
    echo "where:"
    echo "       -h                          : print this help"
    echo "       -l                          : just list the branches"
    echo "       -a                          : list all branches"
    echo "       -b <branch>                 : create and switch to <branch>"
    echo "       -c <log_grep_pattern>       : switch to the selected commit"
    echo "       -n                          : dry run"
    echo "       -q                          : quiet"
}

quiet=0
list=0
newbranch=""
all=0
commit=""
dryrun=0
while getopts hqlb:ac:n flag
do
    case $flag in
	b)
	    newbranch=$OPTARG
	    ;;
	c)
	    commit=$OPTARG
	    ;;
	a)
	    all=1
	    ;;
	l)
	    list=1
	    ;;
	n)
	    dryrun=1
	    ;;
	q)
	    quiet=1
	    ;;
	h)
	    usage
	    exit
	    ;;
	?)
	    usage
	    exit
	    ;;
    esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

if [ ! "$newbranch" == "" ]; then
	echo "Creating and switching to branch: $newbranch"
	read -p "Are you sure? (yes/[no])" ans
	if [ "$ans" == "yes" ] || [ "$ans" == "Yes" ]; then
		cmd="git checkout -b $newbranch"
		if [ $quiet -eq 0 ]; then
		    echo "> $cmd"
		fi
		eval $cmd
		exit
	fi
	exit
fi


filter=""
if [ $# -gt 0 ]; then
	filter="$1"
fi


cmd=""
if [ "$commit" == "" ]; then 
	cmd="git branch"
	if [ $all -eq 1 ]; then
		cmd="$cmd -a"
	fi
	if [ ! $filter == "" ]; then
		cmd="$cmd | grep --color $filter"
	fi
else
		cmd="do-git-log | grep $commit | do-pipe-columns -t 1"
fi


if [ $list -eq 1 ]; then
	if [ $quiet -eq 0 ]; then
	    echo "> $cmd"
	fi
	eval $cmd
	exit
fi

status=$(git status|grep Changes)
if [ ! "$status" == "" ]; then
	echo "Cannot switch. Changes are present!!!"
	git status
	exit
fi

nbranches=$(eval "$cmd"|wc -l)
branch=$(eval "$cmd")

if [ $nbranches -ne 1 ]; then
	echo "No valid branch has been selected:"
	echo "$branch"
	exit
fi


cmd="git checkout $branch"

if [ $quiet -eq 0 ]; then
    echo "> $cmd"
fi
if [ $dryrun -eq 0 ]; then
	eval "$cmd"
fi
