#!/usr/bin/env bash

# TODO: add clone of repo with submodules

function usage() {
    cmd=`basename $0`
    echo "Usage: $cmd [-f] [-a <rpofile>] [-d] <repo-url> [<dest-folder>]"
    echo "             -d            : do a deep clone"
    echo "             -a <profile>  : setup author (.=select)"
}



quiet=0
deep=0
author=""
force=0
while getopts hqda:f flag
do
    case $flag in
    f)
        force=1
        ;;
    q)
        quiet=1
        ;;
    a)
        author="$OPTARG"
        ;;
    d)
        deep=1
        ;;
    h)
        usage
        exit
        ;;
    ?)
        usage
        exit
        ;;
    esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument
if [ $# == 0 ]; then
    usage
    exit
fi

repo_url=$1
if [ $# == 1 ]; then
    repo_folder=$(basename $1|sed 's/\.git//')
else
    repo_folder=$2
fi

if [ -d "$repo_folder" ] && [ $force -eq 0 ]; then
	echo "$repo_folder already exists. Use -f to force the clone"
	exit
fi

[ -d "$repo_folder" ] && [ $force -eq 1 ] && [ $(git -C "$repo_folder" status --porcelain | wc -l) -gt 0 ] && echo "Error - Repository with changes" && exit
[ -d "$repo_folder" ] && [ $force -eq 1 ] && rm -rf "$repo_folder"

cmd="git clone $repo_url $repo_folder"

if [ $quiet -eq 0 ]; then
    echo "> $cmd"
fi
eval $cmd

if [ $deep -eq 1 ]; then
	# http://stackoverflow.com/questions/67699/how-to-clone-all-remote-branches-in-git/4754797#4754797
	cd "$repo_folder"
	for branch in `git branch -a | grep remotes | grep -v HEAD | grep -v master`; do
	    git branch --track ${branch##*/} $branch
	done
	cd ..
fi

if [ ! "$author" == "" ]; then
	cd "$repo_folder"
  [ $(do-git-conf-author -l | grep -c "$author") -ne 1 ] && echo "Error - Wrong author profile" && exit
  do-git-conf-author -c "$author"
fi
