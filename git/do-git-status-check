#!/usr/bin/env bash

# source: https://stackoverflow.com/a/3278427

# use @ for the current branch (assuming you're not in a detached-head state) 
# use @{u} for the upstream branch (eg origin/master)

function remote() {
  \git remote -v | head -1 | sed 's/[ \t]\+/ /g' | cut -d ' ' -f 2
}
# Update tracking branches with: git remote -v update
function status() {
  \git status -s | awk '{print $1}'|sort|uniq|tr -d '\n'
}
function check() {
  GITDIR=$(git rev-parse --git-dir 2>/dev/null)
  [ -z $GITDIR ] && echo "Not a git repository" && return
  UPSTREAM=${1:-'@{u}'} # [optionally] pass an upstream branch explicitly (remotename/branchname)
  LOCAL=$(git rev-parse @)
  REMOTE=$(git rev-parse "$UPSTREAM" 2>/dev/null)
  BASE=$(git merge-base @ "$UPSTREAM" 2>/dev/null)

  if [ "$LOCAL" = "$REMOTE" ]; then
      echo "Up_to_date"
  elif [ "$LOCAL" = "$BASE" ]; then
      echo "Need_to_pull"
  elif [ "$REMOTE" = "$BASE" ]; then
      echo "Need_to_push"
  else
      echo "Diverged"
  fi
}

if [ $# -eq 0 ]; then
  check
else
  for dir in $@
  do
    [ ! -d "$dir" ] && continue
    cd "$dir"
    [ ! -d ".git" ] && cd .. && continue
    echo "$dir: $(git rev-parse --abbrev-ref HEAD 2>/dev/null): $(check): $(status): $(remote)"
    cd ..
  done | column -t -s':'
fi
