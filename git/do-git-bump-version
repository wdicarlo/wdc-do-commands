#!/usr/bin/env bash

# works with a file called VERSION in the current directory,
# the contents of which should be a semantic version number
# such as "1.2.3"

# this script will display the current version, automatically
# suggest a "minor" version update, and ask for input to use
# the suggestion, or a newly entered value.

# once the new version number is determined, the script will
# pull a list of changes from git history, prepend this to
# a file called CHANGES (under the title of the new version
# number) and create a GIT tag.


BUMP_COMMIT_MSG="Version bump to"
TAG_COMMIT_MSG="Tagged version"

# Usage help function
cmd=`basename $0`

function usage() {
        echo "Usage: $cmd [-h] [-d] [-t] [-q] [-p]i [-c]"
        echo "where:"
        echo "       -h                          : print this help"
        echo "       -d                          : use defaults"
        echo "       -t                          : use tags"
        echo "       -p                          : push tags"
        echo "       -c                          : commit CHANGES and VERSION files"
        echo "       -q                          : quiet"
}

# Arguments processing
quiet=0
defaults=0
tag=0
push=0
commit=0
while getopts hqdtpc flag
do
case $flag in
      c)
          commit=1
          ;;
      p)
          push=1
          ;;
      t)
          tag=1
          ;;
      d)
          defaults=1
          ;;
      q)
          quiet=1
          ;;
      h)
          usage
          exit
          ;;
      ?)
          usage
          exit
          ;;
esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

remote=$(git remote -v|head -1| awk '{print $1}')

if [ -f VERSION ]; then
    BASE_STRING=`cat VERSION`
    BASE_LIST=(`echo $BASE_STRING | tr '.' ' '`)
    V_MAJOR=${BASE_LIST[0]}
    V_MINOR=${BASE_LIST[1]}
    V_PATCH=${BASE_LIST[2]}
    echo "Current version : $BASE_STRING"
    V_MINOR=$((V_MINOR + 1))
    V_PATCH=0
    SUGGESTED_VERSION="$V_MAJOR.$V_MINOR.$V_PATCH"
    if [ $defaults -eq 0 ]; then
            read -p "Enter a version number [$SUGGESTED_VERSION]: " INPUT_STRING
    else
            INPUT_STRING=""
    fi
    if [ "$INPUT_STRING" = "" ]; then
        INPUT_STRING=$SUGGESTED_VERSION
    fi
    echo "Will set new version to be $INPUT_STRING"
    echo $INPUT_STRING > VERSION
    echo "Version $INPUT_STRING:" > tmpfile
    BASE_STRING_REF="v$BASE_STRING"
    if [ $tag -eq 0 ]; then
        BASE_STRING_REF=$(do-git-log | grep "$BUMP_COMMIT_MSG $BASE_STRING" | head -1 | do-pipe-columns -t 1)
    fi
    git log --pretty=format:" - %s" "$BASE_STRING_REF"...HEAD >> tmpfile
    echo "" >> tmpfile
    echo "" >> tmpfile
    cat CHANGES >> tmpfile
    mv tmpfile CHANGES
    [ $commit -eq 1 ] && git add CHANGES VERSION && git commit -m "$BUMP_COMMIT_MSG $INPUT_STRING"
    if [ $tag -eq 0 ]; then
        tag=$(git tag|grep "v$BASE_STRING"|wc -l)
    fi
    if [ $tag -eq 1 ]; then
	    git tag -a -m "$TAG_COMMIT_MSG $INPUT_STRING" "v$INPUT_STRING"
    fi
    if [ "$remote" == "origin" ]; then
        if [ $push -eq 1 ]; then
           git push origin --tags
        fi
    fi
else
    echo "Could not find a VERSION file"
    if [ $defaults -eq 0 ]; then
            read -p "Do you want to create a version file and start from scratch? [y]" RESPONSE
    else
            RESPONSE="y"
    fi
    if [ "$RESPONSE" = "" ]; then RESPONSE="y"; fi
    if [ "$RESPONSE" = "Y" ]; then RESPONSE="y"; fi
    if [ "$RESPONSE" = "Yes" ]; then RESPONSE="y"; fi
    if [ "$RESPONSE" = "yes" ]; then RESPONSE="y"; fi
    if [ "$RESPONSE" = "YES" ]; then RESPONSE="y"; fi
    if [ "$RESPONSE" = "y" ]; then
        echo "0.1.0" > VERSION
        echo "Version 0.1.0" > CHANGES
        git log --pretty=format:" - %s" >> CHANGES
        echo "" >> CHANGES
        echo "" >> CHANGES
        [ $commit -eq 1 ] && git add VERSION CHANGES && git commit -m "Added VERSION and CHANGES files, $BUMP_COMMIT_MSG 0.1.0"
        if [ $tag -eq 1 ]; then
            git tag -a -m "$TAG_COMMIT_MSG 0.1.0" "v0.1.0"
        else
            echo "Tag not created. Use the following command to create it"
            echo "git tag -a -m \"$TAG_COMMIT_MSG 0.1.0\" \"v0.1.0\""
        fi
        if [ $tag -eq 1 ]; then
            if [ "$remote" == "origin" ]; then
                if [ $push -eq 1 ]; then
                   git push origin --tags
                fi
            fi
        fi
    fi
fi
