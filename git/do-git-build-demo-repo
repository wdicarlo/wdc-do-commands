#!/usr/bin/env bash

# see https://stackoverflow.com/a/39686693

set -eu

gitflow=0

# Check needed commands
CMD_NAME="git-flow"
cmd=$(which $CMD_NAME) || true
if [ -z "$cmd" ]; then
        gitflow=-1
fi

# Usage help function
cmd=`basename $0`

function usage() {
        echo "Usage: $cmd [-h] [-n <name>] [-s] [-f] [-o] [-d <tree_depth>] [-t|-T] <topology>"
        echo "where:"
        echo "       <topology>                  : topology ID where:"
        echo "             0                       : empty demo repo"
        echo "             1                       : minimum demo repo"
        echo "             2                       : minimum demo repo with a merged branch"
        echo "             3                       : minimum demo repo with an aligned branch"
        echo "             4                       : demo repo with more commits"
        echo "             5                       : demo repo with more commits merged in master"
        echo "             6                       : demo repo with more commits with an aligned branch"
        echo "             7                       : demo repo with diverged master and branch"
        echo "             8                       : demo repo with merged diverged branch"
        echo "             9                       : demo repo with aligned branch after merged diverged branch"
        echo "            10                       : demo repo with rebased branch with feature branch"
        echo "            11                       : demo repo with rebased master with feature branch"
        echo "            12                       : demo repo with commit conflicts"
        echo "            13                       : demo repo with many commits on the same file"
        echo "            14                       : demo repo with many commits on the same big file"
        echo "            15                       : demo repo with more than 10 commits on the same file"
        echo "       -n <name>                   : name of the repository"
        echo "       -s                          : use sub-module"
        echo "       -f                          : use git flow"
        echo "       -o                          : overwrite existing repository"
        echo "       -c                          : create clone repository"
        echo "       -d <tree_depth>             : commit into a folder tree with <tree_depth> depth"
        echo "       -r                          : use random generator"
        echo "       -t                          : use semver tags"
        echo "       -T                          : use tags"
        echo "       -h                          : print this help"
        echo "       -q                          : quiet"
}

gen_num() {
	echo $(($1 + $RANDOM % ($2 - $1)))
}
gen_path() {
	if [ $tree -eq 0 ]; then
		return
	fi
	tree_path="."
	if [ $random -eq 1 ]; then
			for i in $(seq 1 $(gen_num 1 $tree));
			do 
					dir=$(gen_num 1 $tree)
					tree_path="${tree_path}/d$dir"
			done
	else
			tree_path="./d$tree_root"
			for i in $(seq 1 $tree);
			do 
					dir="d$i"
					tree_path="${tree_path}/$dir"
			done
			tree_root=$(($tree_root + 1))
	fi
  echo "$tree_path" # return relative path
}

git_tag() {
    if ! [ "${tag_i:-}" ]; then
        tag_i=0
    fi
    (( tag_i++ )) || true

    tag=""
    branch=$(do-git-branch -n)
    if [ $tags -eq 1 ]; then
      tag="${branch}_t$tag_i"
    else
      tag="1.${tag_i}.0"
      [ ! "$branch" == "master" ] && tag="${tag}-dev"
    fi

    [ ! "$tag" == "" ] && git tag -a "$tag" -m "$tag"
}

git_commit() {
    if ! [ "${commit_i:-}" ]; then
        commit_i=0
    fi
    (( commit_i++ )) || true

    branch=$(do-git-branch -n)
    msg="c$commit_i"
    if [ "$branch" == "$BRANCH_DEV" ]; then
        msg="$BRANCH_DEV: $msg"
    fi

	if [ $tree -eq 0 ] || ([ $random -eq 1 ] && [ $(gen_num 1 10) -le 5 ]); then
		echo "$commit_i" > "$commit_i"
    	git add "$commit_i"
	else
    tree_path=$(gen_path)
		mkdir -p "$tree_path"
		echo "$commit_i" > "$tree_path/$commit_i"
    	git add "$tree_path/$commit_i"
	fi
    git commit -qm "$msg"
}
git_commit_file() {
  append=0
  [ "$1" == "-a" ] && append=1 && shift
  [ ! $# -eq 1 ] && echo "Wrong number of parameters; <filename>" && return
  file="$1"
  [ ! -d "$(dirname $file)" ] && mkdir -p "$(dirname $file)"
  val=0
  if [ -f "$file" ]; then
    val=$(cat ${file}|tail -1|cut -d':' -f2)
  fi
  val=$(($val + 1))
  [ $append -eq 0 ] && echo "${file}:${val}" > "$file" || echo "${file}:${val}" >> "$file"
  msg="Updated ${file}:${val}"
  git add "$file"
  git commit -qm "$msg"
}
git_commit_big_file() {
  [ ! $# -eq 2 ] && echo "Wrong number of parameters; <filename> <size>" && return
  file="$1"
  size="$2"
  msg="Created $file"
  if [ -f "$file" ]; then
    msg="Updated $file"
    cmd="dd if=/dev/random of=$file bs=1w count=1 conv=notrunc"
  else
    cmd="dd if=/dev/zero of=$file bs=$size count=1"
  fi
  echo "> $cmd"
  eval "$cmd"
  git add "$file"
  git commit -qm "$msg"
}
git_commit_conflict() {
    # branch1 branch2 file change1 change2
    branch1="$1"
    branch2="$2"
    file="$3"
    change1="$4"
    change2="$5"
    if [ "$branch1" == "$branch2" ]; then
        return
    fi
    if ! [ "${commit_i:-}" ]; then
        commit_i=0
    fi
    (( commit_i++ )) || true
    msg="c$commit_i 1/2"

    branch=$(do-git-branch -n)

    git checkout -q $branch1
    echo "$change1" >> $file
    git add $file
    if [ "$branch1" == "master" ]; then
        git commit -m "$msg"
    else
        git commit -m "$branch1: $msg"
    fi

    msg="c$commit_i 2/2"
    git checkout -q $branch2
    echo "$change2" >> $file
    git add $file
    if [ "$branch2" == "master" ]; then
        git commit -m "$msg"
    else
        git commit -m "$branch2: $msg"
    fi

    git checkout -q $branch
}

git_merge() {
    if ! [ "${merge_i:-}" ]; then
        merge_i=0
    fi
    (( merge_i++ )) || true
    git merge -m "$merge_i" $1
}

git_merge_conflict() {
    if ! [ "${merge_i:-}" ]; then
        merge_i=0
    fi
    (( merge_i++ )) || true

    $(git merge --no-commit $1) || true

    files=$(git diff --name-only --diff-filter=U)
    for file in $files;
    do
        sed -i '/^<<<<<<<.*\|^>>>>>>>.*\|^=======.*/d' $file
        git add $file
    done

    git commit -qm "merge: $merge_i"
}
git_checkout() {
    if [ "$2" == "$BRANCH_DEV" ]; then
            if [ $gitflow -eq 1 ]; then
                    if [ $tags -ge 1 ]; then
                        git_tag 
                    fi
                    git checkout -q $BRANCH_DEV
                    return
            fi
    fi
    if [ $tags -ge 1 ]; then
        git_tag 
    fi
    git checkout $1 $2
}


# Arguments processing
quiet=0
name="git_demo"
submodule=0
overwrite=0
clone=0
tree=0
tree_path=""
tree_root=0
random=0
tags=0
while getopts hqn:sfoctTrd: flag
do
        case $flag in
        t)
          tags=2 # use semver tags
          ;;
        T)
          tags=1
          ;;
        d)
          tree=$OPTARG
          ;;
        n)
          name="$OPTARG"
          ;;
        r)
          random=1
          ;;
        c)
          clone=1
          ;;
        o)
          overwrite=1
          ;;
        f)
          if [ $gitflow -eq 0 ]; then
              gitflow=1
          else
            echo "Missing $CMD_NAME command" && exit
          fi
          ;;
        s)
          submodule=1
          ;;
        q)
          quiet=1
          ;;
        h)
          usage
          exit
          ;;
        ?)
          usage
          exit
          ;;
        esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

[ $# -ne 1 ] && echo "Wrong input parameters" && usage && exit

[ $(git rev-parse --abbrev-ref HEAD 2>/dev/null|wc -l) -ne 0 ] && echo "Already in a git repo" && exit

A_TOPOLOGY=${1:-}
BRANCH_DEV="develop"
BRANCH_MASTER="master"
BRANCH_FEATURE="feature"

if [ $# -eq 1 ]; then
   A_TOPOLOGY="$1"
fi

if [ $submodule -eq 1 ]; then
   if [ $quiet -eq 0 ]; then echo "Building ${name}_submodule submodule..."; fi
   do-git-build-demo-repo -q -n "${name}_submodule" 5
fi

if [ $quiet -eq 0 ]; then echo "Building $name repository..."; fi

if [ -d "$name" ]; then
        if [ $overwrite -eq 1 ]; then
                echo "Cleaning existing repository: $name"
                rm -rf "$name"
        else
                echo "Git Repository $name already exists. Use -o to overwrite it."
                exit
        fi
fi

mkdir "$name"
cd "$name"
git init -q
do-git-conf-author "wdicarlo" "walter@di-carlo.it"
[ ! "$A_TOPOLOGY" == "0" ] && do-git-bump-version -d 
if [ $gitflow -eq 1 ]; then
   git flow init -d -f
fi
if [ "$A_TOPOLOGY" = 0 ]; then
 touch .gitignore
 git add .
 git commit -m "Init empty repository"
 echo "Created empty repository" 
elif [ "$A_TOPOLOGY" = 10 ]; then
    git_commit
    git_commit
    git_checkout -qb $BRANCH_DEV
    git_commit
    git_commit
    git_checkout -q $BRANCH_MASTER
    git_commit
    git_commit
    c=$(git rev-parse HEAD)
    git_commit
    git_commit
    git_checkout -q $BRANCH_DEV
    git_checkout -qb $BRANCH_FEATURE
    git_commit
    git_commit
    git_checkout -q $BRANCH_DEV
    git_commit
    git_commit
    git --no-pager log --oneline --graph --decorate --all
    git rebase --onto "$c" $BRANCH_DEV $BRANCH_FEATURE
elif [ "$A_TOPOLOGY" = 11 ]; then
    git_commit
    git_commit
    git_checkout -qb $BRANCH_DEV
    git_commit
    git_commit
    git_checkout -q $BRANCH_MASTER
    git_commit
    git_commit
    git_checkout -q $BRANCH_DEV
    c=$(git rev-parse HEAD)
    git_commit
    git_commit
    git_checkout -q $BRANCH_MASTER
    git_checkout -qb $BRANCH_FEATURE
    git_commit
    git_commit
    git_checkout -q $BRANCH_MASTER
    git_commit
    git_commit
    git --no-pager log --oneline --graph --decorate --all
    git rebase --onto "$c" $BRANCH_MASTER $BRANCH_FEATURE
elif [ "$A_TOPOLOGY" = 12 ]; then
    git_commit
    git_commit
    git_checkout -qb $BRANCH_DEV
    git_commit
    git_commit
    git_checkout -q $BRANCH_MASTER
    git_commit
    git_checkout -q $BRANCH_DEV
    git_merge $BRANCH_MASTER
    git_checkout -q $BRANCH_MASTER
    git_merge $BRANCH_DEV
    git_commit_conflict master develop 1 change1 change2
    git_merge_conflict $BRANCH_DEV
elif [ "$A_TOPOLOGY" == 13 ] || [ "$A_TOPOLOGY" == 14 ]; then
    file="file_with_many_commits"
    [ $tree -gt 0 ] && $file="$(gen_path)/$file"
    git_commit
    git_commit
    git_commit_file "$file"
    git_commit_file "$file"
    git_commit_file "$file"
    git_commit_file "$file"
    git_commit
    git_commit
    git_commit
    git_commit
    if [ "$A_TOPOLOGY" == 14 ]; then
      git_commit_big_file "big_file" 1M
      git_commit_big_file "big_file" 1M
      git_commit_big_file "big_file" 1M
    fi
    git_commit
    git_commit
    if [ "$A_TOPOLOGY" == 14 ]; then
      git_commit_big_file "another_big_file" 2M
      git_commit_big_file "another_big_file" 2M
      git_commit_big_file "another_big_file" 2M
    fi
elif [ "$A_TOPOLOGY" == 15 ]; then
  for i in $(seq 5); do git_commit; done
  file="file_with_many_commits"
  [ $tree -gt 0 ] && file="$(gen_path)/$file"
  another_file="another_file_with_many_commits"
  [ $tree -gt 0 ] && another_file="$(gen_path)/$another_file"
  for i in $(seq 1 25)
    do
      num=$(cat /dev/urandom | tr -dc '0-9' | fold -w 2 | head -n 1) 
      git_commit_file -a "$file"
      [ $num -lt 50 ] && git_commit || git_commit_file -a "$another_file"
    done
  for i in $(seq 5); do git_commit; done
else
    git_commit
    git_commit
    git_checkout -qb $BRANCH_DEV
    git_commit
    git_commit
    git_checkout -q $BRANCH_MASTER
    git_commit
    git_commit
    if [ "$A_TOPOLOGY" = 4 ] || [ "$A_TOPOLOGY" = 5 ] || [ "$A_TOPOLOGY" = 6 ]; then
        git_merge $BRANCH_DEV
        git_commit
        git_commit
        git_checkout -q $BRANCH_DEV
        git_commit
        git_commit
        git_checkout -q $BRANCH_MASTER
    elif [ "$A_TOPOLOGY" = 7 ] || [ "$A_TOPOLOGY" = 8 ] || [ "$A_TOPOLOGY" = 9 ]; then
        git_checkout -q $BRANCH_DEV
        git_merge $BRANCH_MASTER
        git_commit
        git_commit
        git_checkout -q $BRANCH_MASTER
        git_commit
        git_commit
    fi
    git_checkout -qb $BRANCH_FEATURE
    git_commit
    git_commit
    git_checkout -q $BRANCH_MASTER
    git_commit
    git_commit
    if [ "$A_TOPOLOGY" = 2 ] || [ "$A_TOPOLOGY" = 5 ] || [ "$A_TOPOLOGY" = 8 ]; then
        git_merge $BRANCH_DEV
    elif [ "$A_TOPOLOGY" = 3 ] || [ "$A_TOPOLOGY" = 6 ] || [ "$A_TOPOLOGY" = 9 ]; then
        git_checkout -q $BRANCH_DEV
        git_merge $BRANCH_MASTER
    fi
fi

if [ $submodule -eq 1 ]; then
    if [ -d "../${name}_submodule" ]; then
            git submodule add "../${name}_submodule" submodule
            (( commit_i++ )) || true
            git commit -qm "s$commit_i"
    fi
fi

if [ $clone -eq 1 ]; then
	git clone . ../${name}_clone
	if [ $gitflow -eq 1 ]; then
		\cd ../${name}_clone
		git flow init -d -f
		\cd - 
	fi
fi

git --no-pager log --oneline --graph --decorate --all
