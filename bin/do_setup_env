#!/usr/bin/env bash
[[ ${BASH_SOURCE[0]} == ${0} ]] && echo "$(basename ${BASH_SOURCE[0]}) must be sourced" && exit

# TODO: use optarg
# TODO: allow global and project specific environments
# TODO: replace use of ` with $(
# TODO: store env files in $HOME/.envs or $PROJECT_PATH/.envs
# TODO: store env template files in WDC_DO_COMMANDS_BIN/envs or $PROJECT_PATH/.envs


function usage() {
  echo "Usage:  do-setup-env [-h] [-s] [-l] [<find options>]"
  echo "where:"
  echo "       -h                          : print this help"
  echo "       -s                          : setup empty environment"
  echo "       -l                          : list available environments"
}

# Arguments processing
OPTIND=1 # reset getopts pointer when sourcing the script (https://stackoverflow.com/a/23615586/3676996)
list=0
empty=0
while getopts hsl flag
do
  case $flag in
    l)
      list=1
      ;;
    s)
      empty=1
      ;;
    h)
      usage
      return
      ;;
    ?)
      usage
      return
      ;;
  esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

is_prj=$(pwd|grep -c $PROJECTS)

envs_tpl_dir="$WDC_DO_COMMANDS_DIR/env"
envs_dir="$HOME/.envs"
if [ $is_prj -eq 1 ]; then
  envs_dir="$PROJECT_PATH/.envs"
fi

[ ! -d "$envs_dir" ] && mkdir -p "$envs_dir"
[ $(ls -1 "$envs_dir"|wc -l) -eq 0 ] && cp ${envs_tpl_dir}/* ${envs_dir}/

export PROJECT_VARS=""

if [ $list -eq 1 ]; then
    if [ $# == 1 ]
    then
        ls -1 ${envs_dir}/do_setup_env_for_* | grep $1 | awk '{ print NR, $0 }' | sed "s#${envs_dir}/do_setup_env_for_##"
    else
        ls -1 ${envs_dir}/do_setup_env_for_* | awk '{ print NR, $0 }' | sed "s#${envs_dir}/do_setup_env_for_##"
    fi
    return
fi

if [ $empty -eq 1 ]; then
    source $WDC_DO_COMMANDS_BIN/do_setup_env empty
    return
fi

n=0
if [ $# == 1 ]
then
    if [ "$PROJECT_ENV" == "$1" ]; then
        return
    fi
    n=$(ls -1 ${envs_dir}/do_setup_env_for_* | grep $1 | awk '{ print NR, $0 }' | wc -l)
    ls -1 ${envs_dir}/do_setup_env_for_* | grep $1 | awk '{ print NR, $0 }' | sed "s#${envs_dir}/do_setup_env_for_##"
else
    n=$(ls -1 ${envs_dir}/do_setup_env_for_* | awk '{ print NR, $0 }' | wc -l)
    ls -1 ${envs_dir}/do_setup_env_for_* | awk '{ print NR, $0 }' | sed "s#${envs_dir}/do_setup_env_for_##"
fi

num=-1
if [ "$n" == 0 ]
then
    echo "Environment/s not found!!!"
    return
fi

if [ "$n" == 1 ]
then
    num=1
else
    read -p "Environment Num: " num
    if [ "$num" == "" ]; then
        return
    fi
fi


if [ $# == 1 ]
then
    prj=$(ls -1 ${envs_dir}/do_setup_env_for_* | grep $1 | awk '{print NR,$0}'|grep "^$num "|awk '{print $2}')
else
    prj=$(ls -1 ${envs_dir}/do_setup_env_for_* | awk '{print NR,$0}'|grep "^$num "|awk '{print $2}')
fi

[ "$prj" == "" ] && return

# TODO: check if the file $prj contains the function setup_project_env
env_path=$(basename $prj)
env_name=${env_path#do_setup_env_for_}
if [ "$env_name" == "$PROJECT_ENV" ]; then
    echo "Active settings: $PROJECT_ENV"
    return
fi

# reset environment 
#PATH=$WDC_DO_COMMANDS_BIN:/opt/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:.
PATH=$HOME/.arkade/bin:$WDC_DO_COMMANDS_BIN:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/opt/bin:.:$HOME/go/bin:$HOME/nbin:$HOME/node_modules/.bin:/snap/bin:$HOME/.krew/bin:$HOME/.fzf/bin
PROJECT_VARS=
export PROJECT_ENV=$env_name
echo "Applying settings: $PROJECT_ENV"
source "$prj"
setup_project_env

if [ -z "$PROJECT_VARS" ]; then
    echo "WARNING: PROJECT_VARS not defined"
else
    for VAR in $PROJECT_VARS 
    do
        eval echo "$VAR=\$$VAR"
    done
fi

if [ -z "$PROJECT_ENV" ]; then
    echo "WARNING: PROJECT_ENV not defined"
else
    echo "PROJECT_ENV=$PROJECT_ENV"
fi
