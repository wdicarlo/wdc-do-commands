#!/usr/bin/env bash
[[ "${BASH_SOURCE[0]}" == "${0}" ]] && echo "$(basename ${BASH_SOURCE[0]}) must be sourced" && exit

#cmd=`basename $0`
cpath=`pwd`


function usage() {
    echo "Usage: do-cd-bookmark [-g] [-l] [-a] [-t] [-s] [<string>]"
    echo "         where:"
    echo "                  -g                 : globals - do not restrict to current project"
#echo "       -b                 : just consider the basename"
    echo "                  -t                 : input is a tag"
    echo "                  -l                 : list bookmarks"
    echo "                  -a                 : returns absolute paths"
    echo "                  -T                 : print the available tags"
    return
}


# TODO: use getopts

global="0"
list="0"
absolute="0"
tags="0"
symbol="0"

# Arguments processing
OPTIND=1 # reset getopts pointer when sourcing the script (https://stackoverflow.com/a/23615586/3676996)
while getopts hgaltT flag
do
  case $flag in
    g)
      global="1"
      ;;
    a)
      absolute="1"
      ;;
    l)
      list="1"
      ;;
    T)
      tags="1"
      ;;
    t)
      symbol="1"
      ;;
    h)
      usage
      return
      ;;
    ?)
      usage
      return
      ;;
  esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

bookmarks_file=`echo ~/.bookmarks`

if [ ! -f $bookmarks_file ]; then
    echo "No Bookmark/s not found!!!"
    return
fi

if [ $tags == "1" ]; then
    if [ "$PROJECT" == "" ]; then
    	if [ "$PROJECT_PATH" == "" ]; then # missing PROJECT should be missing also PROJECT_PATH
		cat $bookmarks_file | xargs -I@ sh -c "echo \"@\"" | grep " # " | sed "s/^.*#//" | tr " " "\n"|grep -v "^$"|sort|uniq|tr "\n" " "; echo
	else
		cat $bookmarks_file | xargs -I@ sh -c "echo \"@\"" | grep -v $PROJECT_PATH | grep " # " | sed "s/^.*#//" | tr " " "\n"|grep -v "^$"|sort|uniq|tr "\n" " "; echo
	fi
    else
        cat $bookmarks_file | xargs -I@ sh -c "echo \"@\"" | grep $PROJECT_PATH | grep " # " | sed "s/^.*#//" | tr " " "\n"|grep -v "^$"|sort|uniq|tr "\n" " "; echo
    fi
    return
fi


if [ "$PROJECT" == "" ]; then
    relpath=`echo $cpath|sed "s#$HOME/##"`
    global="1"
else
    relpath=`echo $cpath|sed "s#$PROJECT_PATH/##"`
fi

postproc="cat"
if [ $absolute == "0" ]; then
    if [ $global == "0" ]; then
        postproc="sed \"s#$PROJECT_PATH/##\""
    else
        postproc="sed \"s#$HOME/##\""
    fi
fi

bookmarks=""

if [ $global == "0" ]; then
    #bookmarks=`cat $bookmarks_file | grep $PROJECT_PATH/ | xargs -I@ sh -c "if [ -d @ ]; then echo @; fi"| sed "s#$PROJECT_PATH/##"`
    #bookmarks=`cat $bookmarks_file | grep $PROJECT_PATH/ | awk -F"#" '/1/2 { if( !system("test -d " $1) ){if (length($2)>0){printf "%-50s # %-30s\n",$1,$2}else{print $1} } }'| sed "s#$PROJECT_PATH/##"`
    if [ "$PROJECT_PATH" == "" ]; then
	    bookmarks=`cat $bookmarks_file | xargs -I@ sh -c "echo \"@\"" | awk -F"#" '/1/2 { if( !system("test -d " $1) ){if (length($2)>0){printf "%-50s # %-30s\n",$1,$2}else{print $1} } }'| eval $postproc`
    else
	    bookmarks=`cat $bookmarks_file | xargs -I@ sh -c "echo \"@\"" | grep $PROJECT_PATH/ | awk -F"#" '/1/2 { if( !system("test -d " $1) ){if (length($2)>0){printf "%-50s # %-30s\n",$1,$2}else{print $1} } }'| eval $postproc`
    fi
else
    # TODO: allows jump into another project's folder by evaluating its .bash_env file
    #bookmarks=`cat $bookmarks_file | grep -v $PROJECTS | awk -F"#" '/1/2 { if( !system("test -d " $1) ){if (length($2)>0){printf "%-50s # %-30s\n",$1,$2}else{print $1} } }'`
    #bookmarks=`cat $bookmarks_file | grep -v $PROJECTS | awk -F"#" '/1/2 { if( !system("test -d " $1) ){if (length($2)>0){printf "%-50s # %-30s\n",$1,$2}else{print $1} } }'| sed "s#$HOME/##"`
    if [ "$PROJECTS" == "" ]; then
	    bookmarks=`cat $bookmarks_file | xargs -I@ sh -c "echo \"@\"" | awk -F"#" '/1/2 { if( !system("test -d " $1) ){if (length($2)>0){printf "%-50s # %-30s\n",$1,$2}else{print $1} } }'| eval $postproc`
    else
	    bookmarks=`cat $bookmarks_file | xargs -I@ sh -c "echo \"@\"" | grep -v $PROJECTS | awk -F"#" '/1/2 { if( !system("test -d " $1) ){if (length($2)>0){printf "%-50s # %-30s\n",$1,$2}else{print $1} } }'| eval $postproc`
    fi
fi

patt=$1
if [ $symbol == "1" ]; then
   patt="#.*$1"
fi
if [ "$list" == "1" ]; then
    if [ $# -gt 0 ]; then
        echo "$bookmarks"| grep $patt | grep --color "^\|$relpath *$\|$relpath *#.*"
    else
        echo "$bookmarks"| grep --color "^\|$relpath *$\|$relpath *#.*"
    fi
    return
fi

num=-1
# TODO: priority to filenames
#folders=`echo $bookmarks | xargs -I@ basename @`
#m=0
#if [ $# == 1 ]
#then
#    m=`echo "$folders" | grep $1 | awk '{ printf "%-2s %-60s\n", NR, $0 }' | wc -l`
#    if [ "$m" -gt 0 ]
#    then
#        if [ "$m" == 1 ]
#        then
#            num=1
#        fi
#
#    fi
#fi

n=0
if [ $# == 1 ]
then
    n=`echo "$bookmarks" | grep $patt | awk '{ printf "%-2s %-60s\n", NR, $0 }' | wc -l`
    echo "$bookmarks" | grep $patt | awk '{ printf "%-2s %-60s\n", NR, $0 }'| grep --color "^\|$relpath *$\|$relpath *#.*"
else
    n=`echo "$bookmarks" | awk '{ printf "%-2s %-60s\n", NR, $0 }' | wc -l`
    echo "$bookmarks" | awk '{ printf "%-2s %-60s\n", NR, $0 }'| grep --color "^\|$relpath *$\|$relpath *#.*"
fi

if [ "$n" == 0 ]
then
    echo "Bookmark/s not found!!!"
    return
fi

if [ "$n" == 1 ]
then
    num=1
else
    read -p "Bookmark Num: " num
fi

if [ "$num" == "" ]; then
    return
fi

if [ $# == 1 ]
then
    bpath=`echo "$bookmarks" | grep $patt | awk '{print NR,$0}'|grep "^$num"|awk '{print $2}'`
else
    bpath=`echo "$bookmarks" | awk '{print NR,$0}'|grep "^$num"|awk '{print $2}'`
fi

if [ $global == "0" ]; then
    cd "$PROJECT_PATH/${bpath}"
else
    if [ "$absolute" == "0" ]; then
    	if [ -d "$HOME/${bpath}" ]; then
	    cd "$HOME/${bpath}"
	else
	    cd "${bpath}"
	fi
    else
	    cd "${bpath}"
    fi
fi

# TODO: apply destination project env
if [ ! -f .bash_env ]; then
	if [ -z PROJECTS ]; then
			shift $#
			. $WDC_DO_COMMANDS_BIN/do_setup_env
	fi
fi
