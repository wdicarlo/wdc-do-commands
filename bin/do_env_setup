#!/usr/bin/env bash
[[ ${BASH_SOURCE[0]} == ${0} ]] && echo "$(basename ${BASH_SOURCE[0]}) must be sourced" && exit

# TODO: use optarg
# TODO: allow global and project specific environments
# TODO: replace use of ` with $(
# TODO: store env files in $HOME/.envs or $PROJECT_PATH/.envs
# TODO: store env template files in WDC_DO_COMMANDS_BIN/envs or $PROJECT_PATH/.envs


function usage() {
  echo "Usage:  do-env-setup [-h] [-i] [-l] [-c] [-v] [<env_name_pattern>]"
  echo "where:"
  echo "       -h                          : print this help"
  echo "       -i                          : setup ini environment"
  echo "       -l                          : list available environments"
  echo "       -c                          : check current and if not valid activate specified env"
  echo "       -e <env>                    : create and activate environment <env>"
  echo "       -v                          : list environment variables"
}

# Arguments processing
OPTIND=1 # reset getopts pointer when sourcing the script (https://stackoverflow.com/a/23615586/3676996)
list=0
init=0
check=0
env=""
vars=0
while getopts hilce:v flag
do
  case $flag in
    v)
      vars=1
      ;;
    e)
      env="$OPTARG"
      ;;
    c)
      check=1
      ;;
    l)
      list=1
      ;;
    i)
      init=1
      ;;
    h)
      usage
      return
      ;;
    ?)
      usage
      return
      ;;
  esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

is_prj=$(pwd|grep -c "${PROJECTS}/[A-Za-z0-9]*")

envs_tpl_dir="${WDC_DO_COMMANDS_DIR}/env"
envs_dir="${HOME}/.envs"
if [ $is_prj -eq 1 ]; then
  envs_dir="${PROJECT_PATH}/.envs"
fi

[ ! -d "$envs_dir" ] && mkdir -p "$envs_dir"
[ $(ls -1 "$envs_dir"|wc -l) -eq 0 ] && cp ${envs_tpl_dir}/do_env_setup_for_ini ${envs_dir}/

export PROJECT_VARS=""

if [[ $vars -eq 1 ]]
then
    env="$1"
    [ $# -eq 0 ] && env="$PROJECT_ENV"
    [ "$env" == "" ] && echo "Missing environment" && return
    n=$(ls -1 ${envs_dir}/do_env_setup_for_* | grep "do_env_setup_for_${env}$" | awk '{ print NR, $0 }' | wc -l)
    [ $n -ne 1 ] && echo "Wrong environment" && return
    cat ${envs_dir}/do_env_setup_for_${env} | grep export | grep -v "PROJECT_VARS" | grep -v "^ \+#" | sed 's/^.*export \+\([a-zA-Z_-]\+\)=.*$/\1/'
    return
fi

if [ $list -eq 1 ]; then
    if [ $# == 1 ]
    then
        ls -1 ${envs_dir}/do_env_setup_for_* | grep $1 | awk '{ print NR, $0 }' | sed "s#${envs_dir}/do_env_setup_for_##"
    else
        ls -1 ${envs_dir}/do_env_setup_for_* | awk '{ print NR, $0 }' | sed "s#${envs_dir}/do_env_setup_for_##"
    fi
    return
fi

if [ $init -eq 1 ]; then
    source $WDC_DO_COMMANDS_BIN/do_env_setup ini
    return
fi


if [ $check -eq 1 ]; then
  is_env=0
  [ ! "$PROJECT_ENV" == "" ] && [ $is_prj -eq 1 ] && is_env=$(ls -1 ${PROJECT_PATH}/.envs | grep -c "do_env_setup_for_${PROJECT_ENV}")
  [ ! "$PROJECT_ENV" == "" ] && [ $is_prj -eq 0 ] && is_env=$(ls -1 ${HOME}/.envs | grep -c "do_env_setup_for_${PROJECT_ENV}")
  [ $is_env -eq 1 ] && [ ! "$PROJECT_ENV" == "ini" ] && return
fi

if [ ! "$env" == "" ]; then
  envpath="${envs_dir}/do_env_setup_for_$env" 
  [ -f "$envpath" ] && echo "Environment already exist!!!" 
  [ ! -f "$envpath" ] && cp "${envs_tpl_dir}/do_env_setup_for_ini" "${envpath}"
  source $WDC_DO_COMMANDS_BIN/do_env_setup $env
  return
fi

n=0
if [ $# == 1 ]
then
    if [ "$PROJECT_ENV" == "$1" ]; then
        echo "Active environment: $PROJECT_ENV"
        return
    fi
    n=$(ls -1 ${envs_dir}/do_env_setup_for_* | grep "do_env_setup_for_$1" | awk '{ print NR, $0 }' | wc -l)
    ls -1 ${envs_dir}/do_env_setup_for_* | grep "do_env_setup_for_$1" | awk '{ print NR, $0 }' | sed "s#${envs_dir}/do_env_setup_for_##"
else
    n=$(ls -1 ${envs_dir}/do_env_setup_for_* | awk '{ print NR, $0 }' | wc -l)
    ls -1 ${envs_dir}/do_env_setup_for_* | awk '{ print NR, $0 }' | sed "s#${envs_dir}/do_env_setup_for_##"
fi

num=-1
if [ "$n" == 0 ]
then
    echo "Environment/s not found!!!"
    return
fi

if [ "$n" == 1 ]
then
    num=1
else
    read -p "Environment Num: " num
    if [ "$num" == "" ]; then
        return
    fi
fi

envpath=""
if [ $# == 1 ]
then
    envpath=$(ls -1 ${envs_dir}/do_env_setup_for_* | grep "do_env_setup_for_$1" | awk '{print NR,$0}'|grep "^$num "|awk '{print $2}')
else
    envpath=$(ls -1 ${envs_dir}/do_env_setup_for_* | awk '{print NR,$0}'|grep "^$num "|awk '{print $2}')
fi

[ "$envpath" == "" ] && return

# TODO: check if the file $envpath contains the function setup_project_env
env_path=$(basename $envpath)
env_name=${env_path#do_env_setup_for_}
if [ "$env_name" == "$PROJECT_ENV" ]; then
    echo "Active environment: $PROJECT_ENV"
    return
fi

# reset environment 
#PATH=$WDC_DO_COMMANDS_BIN:/opt/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:.
export PATH=$HOME/.arkade/bin:$WDC_DO_COMMANDS_BIN:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/opt/bin:.:$HOME/go/bin:$HOME/nbin:$HOME/node_modules/.bin:/snap/bin:$HOME/.krew/bin:$HOME/.fzf/bin
export PROJECT_VARS=
export PROJECT_ENV=$env_name
echo "Applying settings: $PROJECT_ENV"
source "$envpath"
setup_project_env

if [ -z "$PROJECT_VARS" ]; then
    echo "WARNING: PROJECT_VARS not defined"
else
    for VAR in $PROJECT_VARS 
    do
        eval echo "$VAR=\$$VAR"
    done
fi

if [ -z "$PROJECT_ENV" ]; then
    echo "WARNING: PROJECT_ENV not defined"
else
    echo "PROJECT_ENV=$PROJECT_ENV"
fi
# TODO: evaluate to move the following in update_prompt
# set title of terminal window
if [ $is_prj -eq 1 ]; then 
  echo -ne "\033]0;$PROJECT{$PROJECT_ENV}\007"
else
  echo -ne "\033]0;${PWD}{$PROJECT_ENV}\007"
fi
