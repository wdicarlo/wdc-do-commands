#!/usr/bin/env bash


# Support Functions 
yell() { echo "$0: $*" >&2; }
die() { yell "$*"; exit 111; }
try() { "$@" || die "cannot $*"; }


# Usage help function
cmd=`basename $0`

function usage() {
  echo "Usage: $cmd [-h] [-t|T <task_name>|.|-] [-r] [-O|-o|-p] [<file>..]"
  echo "where:"
  echo "       -h                          : print this help"
  echo "       -t|T <task>                 : start/continue work on <task> (-T for global)"
  echo "       -t|T -                      : continue work on last used <task> (-T for global)"
  echo "       -t|T .                      : select task to start/continue work on (-T for global)"
  echo "       -t|T =                      : select task to clone (-T for global)"
  echo "       -r                          : reset session about the <task>"
  echo "       -O|-o|-p                    : vim visualization mode"
}

# Arguments processing
task=""
vimopt=""
session_reset=0
global=0
while getopts ht:T:oOpr flag
do
  case $flag in
    r)
      session_reset=1
      ;;
    p)
      vimopt="-p"
      ;;
    O)
      vimopt="-O"
      ;;
    o)
      vimopt="-o"
      ;;
    T)
      task="$OPTARG"
      [ "$task" == "" ] && task="."
      global=1
      ;;
    t)
      task="$OPTARG"
      [ "$task" == "" ] && task="."
      global=0
      ;;
    h)
      usage
      exit
      ;;
    ?)
      usage
      exit
      ;;
  esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

function list_tasks() {
  action="NEW"
  [ ! "$1" == "" ] && action="$1"
  (echo "$action"; 
  (ls -1 "$OBSESSIONS_PATH" | grep "^task_.*\.vim$"| sed 's/^task_\(.*\)\.vim/\1/';
  ls -1 "$NOTEBOOKS_PATH" | grep "^task_.*\.nb$"| sed 's/^task_\(.*\)\.nb/\1/';) | sort | uniq) | awk '{ printf "%-2s %-60s\n", NR, $0 }' | column -t
}

if [ ! "$task" == "" ]; then
  wdir="$HOME"
  if [ $global -eq 0 ] && [ ! "$PROJECT" == "" ]; then
    wdir="$PROJECT_PATH"
  fi
  OBSESSIONS_PATH="$wdir/.obsessions"
  NOTEBOOKS_PATH="$wdir/.notebooks"
  [ ! -d "$OBSESSIONS_PATH" ] && mkdir -p "$OBSESSIONS_PATH"
  [ ! -d "$NOTEBOOKS_PATH" ] && mkdir -p "$NOTEBOOKS_PATH"

  if [ "$task" == "." ]; then
    list_tasks
    read -p "task? " num

    if [ "$num" == "" ]; then
        exit
    fi
    if [ "$num" == "1" ]; then
      read -p "task name? " task
      task_name="task_$(echo "$task"| tr ' ' '_' | sed 's/^task_//')"
      task_filename="${task_name}.vim"
    else
      task_name="task_$(list_tasks|grep "^$num "|sed 's/[ \t]\+/ /g'|cut -d' ' -f2)"
      task_filename="${task_name}.vim"
    fi
  elif [ "$task" == "=" ]; then
    list_tasks "TASKS:"
    read -p "task to clone? " num
    [ "$num" == "" ] && exit
    [ "$num" == "1" ] && exit
    task_name="task_$(list_tasks|grep "^$num "|sed 's/[ \t]\+/ /g'|cut -d' ' -f2)"
    [ "$task_name" == "task_" ] && exit
    read -p "name of cloned task? " new_name
    [ "$new_name" == "" ] && exit
    new_task_name="task_${new_name}"
    new_task_filename="${new_task_name}.vim"
    new_task_path="$OBSESSIONS_PATH/${new_task_filename}"
    new_nb_filename="${new_task_name}.nb"
    new_nb_path="$NOTEBOOKS_PATH/${new_nb_filename}"
    [ -f "$new_task_path" ] && echo "The task ${new_task_name} already exists." && exit
    [ -f "$new_nb_path" ] && echo "The notebook ${new_task_name} already exists." && exit
    task_filename="${task_name}.vim"
    task_path="$OBSESSIONS_PATH/${task_filename}"
    [ -f "$task_path" ] && cp "$task_path" "$new_task_path"
    nb_filename="${task_name}.nb"
    nb_path="$NOTEBOOKS_PATH/${nb_filename}"
    if [ -f "$nb_path" ]; then
      cp "$nb_path" "$new_nb_path"
      sed -i "s/${task_name}/${new_task_name}/g" "$new_nb_path"
    fi
    task_name="$new_task_name"
    task_filename="$new_task_filename"
  elif [ "$task" == "-" ]; then
    task_name=$(ls -t $OBSESSIONS_PATH | grep "task_" | head -1 | sed 's#^\(task_.*\)\.vim$#\1#')
    task_filename="${task_name}.vim"
  elif [ $(echo "$task" | grep "^[0-9]\+$" | wc -l) -gt 0 ]; then
    num="$task"
    task="."
    [ $num -eq 1 ] && list_tasks "" && exit
    [ $(list_tasks|grep -c "^$num ") -eq 0 ] && echo "Wrong task id" && exit
    task_name="task_$(list_tasks|grep "^$num "|sed 's/[ \t]\+/ /g'|cut -d' ' -f2)"
    task_filename="${task_name}.vim"
  else
    task_name="task_${task}"
    task_filename="${task_name}.vim"
  fi
  task_path="$OBSESSIONS_PATH/${task_filename}"
  nb_cmd="VimNotebookOpen"
  [ $global -eq 1 ] && nb_cmd="VimNotebookOpenGlobal" 
  if [ -f "$task_path" ]; then
    [ $session_reset -eq 1 ] && rm -f "$task_path"
    cmd="\vi -S \"$task_path\" -c \":silent Obsession $task_path\" -c \":$nb_cmd $task_name\" -c \":autocmd BufEnter * :lcd $wdir\" $vimopt $@"
  else
    cmd="\vi -c \":silent Obsession $task_path\" -c \":$nb_cmd $task_name\" -c \":autocmd BufEnter * :lcd $wdir\" $vimopt $@"
  fi
  echo "> $cmd"
  eval "$cmd"
  exit
fi

\vi "$vimopt" $@
