#!/usr/bin/env bash

# see https://stackoverflow.com/a/39686693

set -eu

# Check needed commands
CMD_NAME="git-flow"
cmd=`which $CMD_NAME`
if [ -z "$cmd" ]; then
        echo "Missing $CMD_NAME command"
        exit
fi

# Usage help function
cmd=`basename $0`

function usage() {
        echo "Usage: $cmd [-h] [-n <name>] [-s] [-f] [-o] [<topology>]"
        echo "where:"
        echo "       <topology>                  : topology id (1..10)"
        echo "       -n <name>                   : name of the repository"
        echo "       -s                          : use sub-module"
        echo "       -f                          : use git flow"
        echo "       -o                          : overwrite existing repository"
        echo "       -c                          : create clone repository"
        echo "       -h                          : print this help"
        echo "       -q                          : quiet"
}

git_commit() {
    if ! [ "${commit_i:-}" ]; then
        commit_i=0
    fi
    (( commit_i++ )) || true
    echo "$commit_i" > "$commit_i"
    git add "$commit_i"
    git commit -qm "c$commit_i"
}

git_merge() {
    if ! [ "${merge_i:-}" ]; then
        merge_i=0
    fi
    (( merge_i++ )) || true
    git merge -m "$merge_i" $1
}

git_checkout() {
    if [ "$2" == "$BRANCH_DEV" ]; then
            if [ $gitflow -eq 1 ]; then
                    git checkout -q $BRANCH_DEV
                    return
            fi
    fi
    git checkout $1 $2
}


# Arguments processing
quiet=0
name="git_demo"
submodule=0
gitflow=0
overwrite=0
clone=0
while getopts hqn:sfoc flag
do
        case $flag in
        n)
          name="$OPTARG"
          ;;
        c)
          clone=1
          ;;
        o)
          overwrite=1
          ;;
        f)
          gitflow=1
          ;;
        s)
          submodule=1
          ;;
        q)
          quiet=1
          ;;
        h)
          usage
          exit
          ;;
        ?)
          usage
          exit
          ;;
        esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

A_TOPOLOGY=${1:-}
BRANCH_DEV="develop"
BRANCH_MASTER="master"
BRANCH_TMP="t1"

if [ $# -eq 1 ]; then
   A_TOPOLOGY="$1"
fi

if [ $submodule -eq 1 ]; then
   if [ $quiet -eq 0 ]; then echo "Building ${name}_submodule submodule..."; fi
   do-git-build-demo-repo -q -n "${name}_submodule" 5
fi

if [ $quiet -eq 0 ]; then echo "Building $name repository..."; fi

if [ -d "$name" ]; then
        if [ $overwrite -eq 1 ]; then
                rm -rf "$name"
        else
                echo "Git Repository $name already exists. Use -o to overwrite it."
                exit
        fi
fi

mkdir "$name"
cd "$name"
git init -q
do-git-bump-version -d
if [ $gitflow -eq 1 ]; then
   git flow init -d -f
fi
if [ "$A_TOPOLOGY" = 10 ]; then
    git_commit
    git_commit
    git_checkout -qb $BRANCH_DEV
    git_commit
    git_commit
    git_checkout -q $BRANCH_MASTER
    git_commit
    git_commit
    c=$(git rev-parse HEAD)
    git_commit
    git_commit
    git_checkout -q $BRANCH_DEV
    git_checkout -qb $BRANCH_TMP
    git_commit
    git_commit
    git_checkout -q $BRANCH_DEV
    git_commit
    git_commit
    git rebase --onto "$c" $BRANCH_DEV $BRANCH_TMP
elif [ "$A_TOPOLOGY" = 11 ]; then
    git_commit
    git_commit
    git_checkout -qb $BRANCH_DEV
    git_commit
    git_commit
    git_checkout -q $BRANCH_MASTER
    git_commit
    git_commit
    git_checkout -q $BRANCH_DEV
    c=$(git rev-parse HEAD)
    git_commit
    git_commit
    git_checkout -q $BRANCH_MASTER
    git_checkout -qb $BRANCH_TMP
    git_commit
    git_commit
    git_checkout -q $BRANCH_MASTER
    git_commit
    git_commit
    git rebase --onto "$c" $BRANCH_MASTER $BRANCH_TMP
else
    git_commit
    git_commit
    git_checkout -qb $BRANCH_DEV
    git_commit
    git_commit
    git_checkout -q $BRANCH_MASTER
    git_commit
    git_commit
    if [ "$A_TOPOLOGY" = 4 ] || [ "$A_TOPOLOGY" = 5 ] || [ "$A_TOPOLOGY" = 6 ]; then
        git_merge $BRANCH_DEV
        git_commit
        git_commit
        git_checkout -q $BRANCH_DEV
        git_commit
        git_commit
        git_checkout -q $BRANCH_MASTER
    elif [ "$A_TOPOLOGY" = 7 ] || [ "$A_TOPOLOGY" = 8 ] || [ "$A_TOPOLOGY" = 9 ]; then
        git_checkout -q $BRANCH_DEV
        git_merge $BRANCH_MASTER
        git_commit
        git_commit
        git_checkout -q $BRANCH_MASTER
        git_commit
        git_commit
    fi
    git_checkout -qb $BRANCH_TMP
    git_commit
    git_commit
    git_checkout -q $BRANCH_MASTER
    git_commit
    git_commit
    if [ "$A_TOPOLOGY" = 2 ] || [ "$A_TOPOLOGY" = 5 ] || [ "$A_TOPOLOGY" = 8 ]; then
        git_merge $BRANCH_DEV
    elif [ "$A_TOPOLOGY" = 3 ] || [ "$A_TOPOLOGY" = 6 ] || [ "$A_TOPOLOGY" = 9 ]; then
        git_checkout -q $BRANCH_DEV
        git_merge $BRANCH_MASTER
    fi
fi

if [ $submodule -eq 1 ]; then
    if [ -d "../${name}_submodule" ]; then
            git submodule add "../${name}_submodule" submodule
            (( commit_i++ )) || true
            git commit -qm "s$commit_i"
    fi
fi

if [ $clone -eq 1 ]; then
	git clone . ../${name}_clone
	if [ $gitflow -eq 1 ]; then
		\cd ../${name}_clone
		git flow init -d -f
		\cd - 
	fi
fi

git --no-pager log --oneline --graph --decorate --all
