kubernetes
	system for automating deployment, scaling, and management of containerized applications
Download arkade - portable marketplace for downloading your favourite devops CLIs and installing helm charts
	curl -sLS https://dl.get-arkade.dev | sudo sh
List available tools
	arkade install --help
Get kind tool
	arkade get kind --version=v0.10.0
Get kubectl tool
	arkade get kubectl --version=v1.21.0
Create k8s cluster using kind
	kind create cluster
Get kubernetes version
	kubectl version # Server Version: version.Info{Major:"1", Minor:"18", GitVersion:"v1.18.6"... The Server Version is the version of Kubernetes your cluster is running.
Get nodes versions
	kubectl get nodes # example: pool-rxaxmuoj-5s42o   Ready    <none>   26d   v1.18.6
Get (kind) cluster information
	kubectl cluster-info --context kind-kind
Create a namespace
	kubectl create namespace argocd
Get the argocd CLI
	arkade install argocd
Install argocd without using arkade
	kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
Manage argocd with argocd
	argocd app create argo-cd --repo https://gitlab.cern.ch/clange/gitops-argo-cd.git --path 01_argo-cd --dest-server https://kubernetes.default.svc --dest-namespace argocd
Get argocd list of pods
	kubectl get pods --namespace argocd
Port-forward the argocd API server
	kubectl port-forward svc/argocd-server -n argocd 8443:443 &
Get the argocd password
	PASS=$(kubectl get secret argocd-initial-admin-secret \
	  -n argocd \
	  -o jsonpath="{.data.password}" | base64 -d)
Login in argocd
	argocd login --name local 127.0.0.1:8443 --insecure \
	 --username admin \
	 --password $PASS
Open the argocd UI:
	https://127.0.0.1:8443
List argocd accounts
	argocd account list
List k8s events filtered by namespace
	kubectl get events -n openfaas
Install k9s tool and run it
	arkade get k9s
	export LC_ALL=C && k9s
List applications deployed with argocd
	argocd app list -o wide
List available Custom Resources Definitions (CRD)
	kubectl get customresourcedefinitions.apiextensions.k8s.io
Create openfaas function with argocd
	argocd app create openfaas-functions \
		--repo https://github.com/wdicarlo/bring-gitops-to-your-openfaas-functions-with-argocd.git \
		--dest-server https://kubernetes.default.svc \ # this URL must be used when deploying in the same cluster that Argo CD is running in
		--path functions \
		--self-heal \
		--sync-policy automatic
Define KUBECONFIG variable to manage more than one k8s cluster
	export KUBECONFIG=<path_to_config_1>:<path_to_config_2>
View merged k8s clusters configs
	kubectl config view
Print specific config
	kubectl config --kubeconfig <path_to_config> view
Generate kubectl bash completition file
	kubectl completion bash
Query configured users 
	kubectl config view -o jsonpath='{.users[*].name}'   # get a list of users
	kubectl config view -o jsonpath='{.users[].name}'    # display the first user
	kubectl config view -o jsonpath='{.users[?(@.name == "local")].user.password}' # get password of local user
Manage contexts
	kubectl config get-contexts                          # display list of contexts
	kubectl config current-context                       # display the current-context
	kubectl config use-context my_cluster_name           # set the default context to my_cluster_name
	kubectl config unset current-context                 # unset the current context
	kubectl config set-context --current --namespace=mynamespace  # permantelly set the namespace of the current context
Get all pods configuration in json format
	k get pods --all-namespaces -o json | jq '.'
List all images in the cluster using jsonpath
	k get pods --all-namespaces -o jsonpath={..image} | tr ' ' '\n' | sort | uniq | column -t -d':'
List all images in the cluster using jq
	k get pods --all-namespaces -o json | jq -r '.items[].spec.containers[].image' | sort | uniq | column -t -d':' # -r to get the jq output without the " 
