#!/usr/bin/env bash



cmd=`basename $0`

function usage() {
    echo "Usage: $cmd [-h] [-a] [-i] [-b] [-p] [-c ] [-s "substitute-string"][-e <exclude-patt>] [-r <root>] [-n <depth>] [-f <file-pattern>] [-g] [-C n] <string>"
    echo "where:"
    echo "       -h                          : print this help"
    echo "       -i                          : ignore case"
    echo "       -b                          : include binary files"
    echo "       -c                          : just count occurences"
    echo "       -p                          : just print the paths"
    echo "       -r <root>                   : start from root folder"
    echo "       -n <depth>                  : max depth to search into"
    echo "       -f <file-pattern>           : filename pattern to use"
    echo "       -e <exclude-patt>           : exclude pattern"
    echo "       -a                          : use ack-grep"
    echo "       -s \"substitute-string\"    : substitute <string> with substitute-string"
    echo "       -C n                        : context like A2 B1 C3..."
    echo "       -g                          : find string storing the result"
    echo "       -v                          : verbose"
    echo "       -q                          : quiet"
}

if [ $# == 0 ]; then
    usage
    exit
fi

pars="-Hn"
root="."
file=""
depth=99
postproc=""
exclude=""
quiet=0
binary=0
grep_cmd="\grep"
ss=""
justgrep=1
verbose=0
if [ ! -t 1 ]; then
    quiet=1
fi
while getopts habqicpr:n:f:e:s:gC:v flag
do
    case $flag in
        a)
            ack_grep=`which ack-grep`
            if [ ! -z "$ack_grep" ]; then
                grep_cmd="ack-grep"
            fi
            ;;

        v)
            verbose=1
            ;;
        g)
            justgrep=0
            ;;
        b)
            binary=1
            ;;
        q)
            quiet=1
            ;;
        C)
            grep_cmd="$grep_cmd -$OPTARG"
            ;;
        e)
            exclude=$OPTARG
            ;;
        s)
            ss=$OPTARG
            pars="-l"
            postproc="xargs -I@ sed -i -e 's#$string#$ss#g' @"
            binary=0
            ;;
        i)
            pars+="i"
            ;;
        p)
            pars="-l"
            ;;
        c)
            # just count occurences, filter out files with not matching the string and revert sort the list
            pars="-Hnc"
            postproc="\grep -v \":0\"| sort -t \":\" -nr -k 2"
            ;;
        f)
            if [ "$file" == "" ]; then
                file="-name $OPTARG"
            else
                file+=" -or -name $OPTARG"
            fi
            ;;
        r)
            root=$OPTARG
            ;;
        n)
            depth=$OPTARG
            ;;
        h)
            usage
            exit
            ;;
        ?)
            usage
            exit
            ;;
    esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

string=$1

bin_filter="| do-pipe-wrapped-text | xargs file | grep text | cut -d: -f1"
if [ $binary -eq 1 ]; then
    bin_filter=""
fi

#sav_filter="| grep -v \".sav$\""
sav_filter=""
verbose_cmd=""
if [ $verbose -eq 1 ]; then
	verbose_cmd="echo @;"
fi
if [ "$exclude" == "" ]; then
    cmd="find \"$root\" -maxdepth \"$depth\" \( -type d -name .svn -prune -o -type d -name .git -prune \) -o -type f $file $bin_filter $sav_filter | xargs -I@ sh -c \"$verbose_cmd $grep_cmd --color \\\"$pars\\\" \\\"$string\\\" @\""
else
    cmd="find \"$root\" -maxdepth \"$depth\" \( -type d -name .svn -prune -o -type d -name .git -prune \) -o -type f $file $bin_filter $sav_filter | xargs -I@ sh -c \"$grep_cmd --color \\\"$pars\\\" \\\"$string\\\" @| \grep -v \\\"$exclude\\\"|\grep --color \\\"$string\\\"\""
fi
if [ ! "$postproc" == "" ]; then
    cmd+="|$postproc"
fi
cmd+=" 2>/dev/null"
if [ $quiet -eq 0 ]; then
    echo "> $cmd"
fi

#TODO: remove whitespaces and special characters from $string
output_file=$(echo ~/.do-find-string/$string)

if [ $justgrep -eq 0 ]; then
    #eval $cmd | tee ~/.bash_output  | \grep --color "^\|$string"
    eval $cmd | tee $output_file  | \grep --color "^\|$string"
else
    eval $cmd 
fi
