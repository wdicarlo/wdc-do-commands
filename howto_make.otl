remake tool can be used to debug make build procedures
	remake -d
execute make in all subprojects
	rocks_names= \
		lpeg-0.10.2 \
		luafilesystem-1.6.2 \
		luasocket-2.0.2 \
		luasql-2.1 \
		lua_svi \
		rings-1.3.0
	all clean:
		for rock in $(rocks_names); do ( cd rocks/$$rock; $(MAKE) $@ || exit 1); done
execute a make in a subproject without cd into its folder
	subproject:
		$(MAKE) all --directory=$(SUBPROJECT_DIR) || exit 1; 
copy all archives present in the subprojects
	for lib in $(shell find . -name "*.a"); do \
		(cp $$lib $(LIB_DIR)/ \
		|| exit 1); done
objcopy rule
	$(BUILD_DIR)/$(TARGET).bin: $(BUILD_DIR)/$(TARGET).elf
		@echo " [OC]  -- $< --> $@"
		$(VERB)$(OBJCPY) -O binary $< $@	
Example of pattern rule
	%.dat: %.avsc
		do-avro random --count 10 --schema-file $< $@
		do-avro tojson --pretty $@
Print commands executed by the shell
	make SHELL="bash -x"
Print commands without excuting them
	make -n
Execute make commands in parallel using <n> different processes
	make -j<n>
Condition source code compilation
	In Makefile
		DEBUG=0
		...
		gcc CFLAGS+=-DDEBUG=${DEBUG}
	In source code
	    #if DEBUG
		#  warning "Debugging is enabled now, expect funny results"
			// debug code
		#endif
	Then use command
		make DEBUG=1
Use spaces instead of tabs for commands before targets
	ifeq ($(SVIPROXY_TEST_TYPE),SVIPROXY_TEST_ALARM_SIM_WEB_LUA)
		SVIPROXY_TEST_CFLAGS+=-D$(SVIPROXY_TEST_TYPE)
	else
	   $(error Wrong SVIPROXY_TEST_TYPE=$(SVIPROXY_TEST_TYPE)) # here use spaces instead of tabs
	endif
