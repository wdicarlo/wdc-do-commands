Start the lua interpreter
	lua
Use relative paths in require command
	require 'lib.foo.bar'
	local pathOfThisFile = ... -- pathOfThisFile is now 'lib.foo.bar'
	local folderOfThisFile = (...):match("(.-)[^%.]+$") -- returns 'lib.foo.'
	require(folderOfThisFile .. 'baz')     -- require('lib.foo.baz')
	require(folderOfThisFile .. 'bazinga') -- require('lib.foo.bazinga')
Portable sleep implementation
	require "socket"
	function sleep(sec)
		socket.select(nil, nil, sec)
	end
	sleep(0.2)
Access lua table from c code
	Table in the Lua universe:
		foo = { ["bar"] = 3 }
	C code to get number 3:
		lua_getglobal(L, "foo"); // puts the table foo on top of the stack
		lua_pushstring(L, "bar"); // now the string "bar" is just above the table on the stack
		lua_gettable(L, -2); // finds the table foo in stack position -2, pops "bar" off the stack, pushes on foo["bar"]
		int n = lua_tonumber(L, -1); // n should now be equal to 3
Requiring optional module
	local has_lfs,lfs = pcall(require,"lfs")
Check how many arguments to the C function are present
	n = lua_gettop(L)
Requiring optional module
	if not pcall(require, 'checks') then function package.preload.checks() function checks() end end end
Require a module with the C code
    lua_getglobal(L, "require");
    lua_pushstring(L,"avro");
    lua_pcall(L,1,0,0);
Share a string between C and Lua
    lua_newtable(L);    /* We will pass a table */
    lua_pushstring(L, "json");
    lua_pushstring(L, json);
    lua_rawset(L, -3);      /* Stores the pair in the table */
    lua_setglobal(L, "json_data");
Execute a Lua script from C code
    /*
     * All Lua contexts are held in this structure. We work with it almost
     * all the time.
     */
    L = luaL_newstate();

    luaL_openlibs(L); /* Load Lua libraries */

    /* Load the file containing the script we are going to run */
    printf("Loading lua script\n");
    if( argc > 0 )
    {
        status = luaL_loadfile(L, argv[1]);
    } else
    {
        status = luaL_loadfile(L, "test_userdata.lua");
    }
    if (status) {
        /* If something went wrong, error message is at the top of */
        /* the stack */
        fprintf(stderr, "Couldn't load file: %s\n", lua_tostring(L, -1));
        exit(1);
    }


    /* Ask Lua to run our little script */
    printf("Executing lua script\n");
    result = lua_pcall(L, 0, LUA_MULTRET, 0);
    if (result) {
        fprintf(stderr, "Failed to run script: %s\n", lua_tostring(L, -1));
        exit(1);
    }

    /* Get the returned value at the top of the stack (index -1) */
    sum = lua_tonumber(L, -1);

    printf("Script returned: %.0f\n", sum);

    lua_pop(L, 1);  /* Take the returned value out of the stack */
    lua_close(L);   /* Cya, Lua */
