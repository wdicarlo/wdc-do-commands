#!/usr/bin/env bash
# see https://kind.sigs.k8s.io/docs/user/local-registry/
# 
# Push an image to the registry with:  
#      docker push localhost:5000/hello-app:1.0
# Deploy the image with: 
#      kubectl create deployment hello-server --image=localhost:5000/hello-app:1.0

# Pull image to work offline
# docker login <repo>
# git pull kindest/node:v1.21.1@sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6
#

# # config-with-mounts.yaml
# kind: Cluster
# apiVersion: kind.x-k8s.io/v1alpha4
# nodes:
# - role: control-plane
#   # add a mount from /path/to/my/files on the host to /files on the node
#   extraMounts:
#   - hostPath: /path/to/my/files/
#     containerPath: /files

# # config-with-port-mapping.yaml
# kind: Cluster
# apiVersion: kind.x-k8s.io/v1alpha4
# nodes:
# - role: control-plane
#   # port forward 80 on the host to 80 on this node
#   extraPortMappings:
#   - containerPort: 80
#     hostPort: 80
#     # optional: set the bind address on the host
#     # 0.0.0.0 is the current default
#     listenAddress: "127.0.0.1"
#     # optional: set the protocol to one of TCP, UDP, SCTP.
#     # TCP is the default
#     protocol: TCP

set -o errexit

# create registry container unless it already exists
reg_name='kind-registry'
reg_port='5000'
running="$(docker inspect -f '{{.State.Running}}' "${reg_name}" 2>/dev/null || true)"
if [ "${running}" != 'true' ]; then
  docker run \
    -d --restart=always -p "127.0.0.1:${reg_port}:5000" --name "${reg_name}" \
    registry:2
fi

# create a cluster with the local registry enabled in containerd
# cat <<EOF | kind create cluster --image kindest/node:v1.21.1@sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6 --config=-
cat <<EOF | kind create cluster --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
containerdConfigPatches:
- |-
  [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:${reg_port}"]
    endpoint = ["http://${reg_name}:${reg_port}"]
EOF

# connect the registry to the cluster network
# (the network may already be connected)
docker network connect "kind" "${reg_name}" || true

# Document the local registry
# https://github.com/kubernetes/enhancements/tree/master/keps/sig-cluster-lifecycle/generic/1755-communicating-a-local-registry
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-registry-hosting
  namespace: kube-public
data:
  localRegistryHosting.v1: |
    host: "localhost:${reg_port}"
    help: "https://kind.sigs.k8s.io/docs/user/local-registry/"
EOF

