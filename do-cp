#!/usr/bin/env bash

#TODO: add option to avoid to recreate all the folders tree of the source file location
function usage()
{
    cmd=`basename $0`
    echo "Copy files recreating the source folders tree and the destination folder"
    echo "Usage: $cmd [-m] [-f] [-a] [-r] [-R] <src1>...<srcn> <dst>"
    echo "             -m                   : move the file"
    echo "             -f                   : just consider the source file/s, not the location"
    echo "             -a                   : if destination file exist, add a new version"
    echo "             -r                   : if destination file exist, backup it and replace it"
    echo "             -R                   : if destination file exist, just replace it"
    echo "             -q                   : quiet"
    echo "             -n                   : dry run"
    exit
}

move=0
foldertree=1
replace=0
dryrun=0
quiet=0
while getopts hmqfrRna flag
do
    case $flag in
        a)
            replace=3
            ;;
        R)
            replace=2
            ;;
        r)
            replace=1
            ;;
        n)
            dryrun=1
            ;;
        m)
            move=1
            ;;
        f)
            foldertree=0
            ;;
        q)
            quiet=1
            ;;
        h)
            usage
            exit
            ;;
        ?)
            usage
            exit
            ;;
    esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

dest="${@: -1}" # get last parameter

folder=`basename $dest`
n=`echo $folder|grep "\." |wc -l`

if [ $n -gt 0 ]; then
    echo "Folder's name with dot: $folder"
    echo "Are you sure it is the name of the destination folder?"
    exit
fi



#check if dest folder exists
if [ ! -d $dest ]; then
    mkdir -p $dest
fi

curdate="`date '+%y%m%d-%H%M%S'`"
num=$(($# - 1))
count=0
dest="$(dirname $dest)/$(basename $dest)"
if [ $dryrun -eq 0 ]; then
# pre-check if a file is already present
    for file in $@; do
        from=$file
        if [ $foldertree -eq 1 ]; then
            to=$dest/$from
        else
            to=$dest/$(basename $from)
        fi

        if [ -f $to ]; then
            if [ $replace -eq 0 ]; then
                echo "Destination already exist: $to"
                exit
            fi
        fi
    done
fi
for file in $@; do
    from=$file
    if [ $foldertree -eq 1 ]; then
        to=$dest/$from
    else
        to=$dest/$(basename $from)
    fi
    parent=$(dirname $to)
    if [ ! -d $parent ]; then
        mkdir -p $parent
    fi

    backup="true" # could use : but is less readable
    if [ -f $to ]; then
        if [ $replace -eq 0 ]; then
            echo "Destination already exist: $to"
            count=$(($count + 1))
            if [ $count -eq $num ]; then
                break #skip last parameter
            fi
            continue
        elif [ $replace -eq 3 ]; then
            toname="${to%.*}"
            toext="${to##*.}"
            to="$toname-$curdate.$toext"
        elif [ $replace -eq 1 ]; then
            toname="${to%.*}"
            toext="${to##*.}"
            backup="cp $to $toname-$curdate.$toext"
        fi
    fi
    if [ $move -eq 1 ]; then
        cmd="$backup; mv $from $to"
    else
        cmd="$backup; cp $from $to"
    fi
    if [ $quiet -eq 0 ]; then
        echo "> $cmd"
    fi
    if [ $dryrun -eq 0 ]; then
        eval "$cmd"
    fi
    count=$(($count + 1))
    if [ $count -eq $num ]; then
        break #skip last parameter
    fi
done
if [ $dryrun -eq 0 ]; then
    last $dest
fi
