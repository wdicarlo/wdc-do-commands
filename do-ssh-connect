#!/usr/bin/env bash

root=$(echo ~/.do_remotes)
if [ ! -d $root ]; then
    echo "Missing remote machines details"
    exit
fi
remotes=$(echo $root/remotes.map)
if [ ! -f $remotes ]; then
    echo "Missing remote machines details"
    exit
fi
# Usage help function
cmd=`basename $0`

function usage() {
   echo "Usage: $cmd [-h] [<arg>]"
   echo "where:"
   echo "       <arg>                       : machine id"
   echo "       -h                          : print this help"
   echo "       -l                          : list machines"
   echo "       -n                          : dry run"
   echo "       -v                          : verbose"
}

# Arguments processing
quiet=0
dryrun=0
verbose=0
list=0
while getopts hnlv flag
do
case $flag in
  v)
      verbose=1
      ;;
  q)
      quiet=1
      ;;
  n)
      dryrun=1
      ;;
  l)
      list=1
      ;;
  h)
      usage
      exit
      ;;
  ?)
      usage
      exit
      ;;
   esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

if [ $list -eq 1 ]; then
    cat $remotes | awk '{ printf "%-2s %-60s\n", NR, $0 }'
    exit
fi

machines=$(cat $remotes|sed 's/^\(.*\) .*/\1/')
if [ $# -eq 0 ]; then
    echo "Please insert the instance name:"
    cat $remotes | awk '{ printf "%-2s %-60s\n", NR, $0 }'
    read -p "Machine? " num

    if [ "$num" == "" ]; then
        return
    fi
else
    num="$1"
fi

instance=$(echo "$machines" | awk '{print NR,$0}'|grep "^$num"|awk '{print $2}')
echo "$instance"
if [[ "$instance" == "" ]]; then
        echo "Unknown instance"
        exit
fi

pem=$(echo $root/${instance}.pem)
echo $pem
if [ ! -f "$pem" ]; then
    echo "Missing public key file"
    exit
fi

remote=`cat $root/remotes.map|awk '{print NR,$0}'|grep "^$num"|awk '{print $3}'`
if [ $verbose -eq 1 ]; then
    cmd="ssh -v -i $pem $remote"
else
    cmd="ssh -i $pem $remote"
fi

echo "> $cmd"
if [ $dryrun -eq 0 ]; then
    eval "$cmd"
fi
