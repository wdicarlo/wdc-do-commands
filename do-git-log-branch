#!/usr/bin/env bash

# Usage help function
cmd=$(basename $0)
function usage() {
	echo "Usage: $cmd [-h] [-q] [-p] [-m] [<parent> <branch>]"
	echo "where:"
	echo "       -h                          : print this help"
	echo "       -p                          : print patch of commits"
	echo "       -u                          : consider only unpushed commits"
	echo "       -m                          : list also merge commits"
	echo "       -q                          : quiet"
}

# function to find a substring
# source: https://stackoverflow.com/a/20460402/3676996
stringContain() { [ -z "${2##*$1*}" ] && [ -z "$1" -o -n "$2" ]; }

# Arguments processing
quiet=0
patches=0
unpushed=0
merges=0
while getopts hqpum flag
do
    case $flag in
	m)
	    merges=1
	    ;;
	u)
	    unpushed=1
	    ;;
	p)
	    patches=1
	    ;;
	q)
	    quiet=1
	    ;;
	h)
	    usage
	    exit
	    ;;
	?)
	    usage
	    exit
	    ;;
    esac
done
shift $(( OPTIND - 1 ))  # shift to the last flag or argument

if [ $# -eq 0 ]; then
	parent=$(do-git-get-parent-branch)
	branch=$(do-git-branch -n)
else
	if [ $# -eq 2 ]; then
		parent=$1
		branch=$2
	else
		usage
		exit
	fi
fi




options=""
if [ $patches -eq 1 ]; then
	options="-p -w"
fi

cmd="git log --oneline --decorate --first-parent $options $parent..$branch"

if [ $unpushed -eq 1 ]; then
	cmd="$cmd | while read line; do if stringContain 'origin' \"\$line\"; then exit; fi; echo \"\$line\"; done"
else
	if [ $merges -eq 0 ]; then
		options="$options --no-merges"
		cmd="git log --oneline --decorate --first-parent $options $parent..$branch"
	fi
fi

# Quieting command output
if [ $quiet -eq 0 ]; then
    echo "> $cmd"
fi
eval "$cmd"
