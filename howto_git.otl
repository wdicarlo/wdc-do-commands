Git HowTos
	List of git howtos
Sync tags
	git push --tags
	git fetch --tags
Create a new branch and checkout
	git checkout -b linux-2.6.35.0-oklaoma-azcommon
Create a new branch and checkout a remote branch
	git checkout -b GitDemos_1_2_2 origin/GitDemos_1_2_2
Switch to master
	git checkout master
Merge branch
	git merge linux-2.6.35.0-oklaoma-azcommon
Push changes to remote
	git push origin master
Push changes of a branch to remote
	git push origin GitDemos_1_2_2
Pull changes from remote
	git pull origin
Pull changes from a specific remote branch
	git pull origin abranch
Pull changes from a specific remote branch and merge into a different branch
	git checkout abranch
	git pull origin anotherbranch
Undo all changes
	git checkout HEAD
	git reset HEAD --hard
	git clean -f -d
Differences of last remote commits
	git diff  origin/GitDemos..origin/GitDemos~2
Stats of a git commit
	git diff --stat 04c77e46ee
Delete remote branch
	git push origin --delete GitDemos_1_2_2
Prune branches remotelly deleted
	git remote prune origin
Create patch from a git commit
	git format-patch -1 04c77e46ee
Create the patch of the branch GitDemos_Ark_GPIO
	git format-patch GitDemos --stdout > ../ark_gpio.patch
Fast-forward merge of a remote branch
	git merge origin/GitDemos
Patch of changes ready to be committed on master
	git diff master > ../adiff.patch
Print diffs of a file ready to be committed on master
	git diff master Makefile
Unstage files ready to be committed
	git rm -r --cached  *
Create a Patch of last commit avoiding whitespaces
	git diff -w HEAD~1..HEAD > ../fsmc_20121117_no_whitespace_changes.patch
List last 5 short log messages
	git log --pretty=oneline --abbrev-commit -5
Update tracking branches
	git remote -v update
Delete a tag
	git tag -d mytag
Create a tag
	git tag -m "GitDemos 1.2.4" gitdemos-1.2.4
Track a specific remote branch of a different repository
	git remote add -t GitDemos gitdemos ssh://gitvcs@192.168.10.1/mnt/devrepos/gitrepos/STMANTA/linux-2.6.35
List all tags
	git tag -l
List all url specified in the git config
	git config --get-regexp url
List first 10 commit id
	git log --oneline gitdemos/GitDemos -10 | awk '{ print $1 }'
Print reverted list of last 10 commit id
	git log --oneline gitdemos/GitDemos -10 | awk '{ print $1 }' | git rev-list --reverse --stdin -10
Create a branch whit changed files still not stagged
	git checkout -b another_branch
Display nice git history
	git log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
Unstage added file EXAMPLES
	git reset HEAD EXAMPLES
Diff of file ready to be committed
	git diff -w master -- arch/arm/mach-gitdemos/gitdemos10_debug_board.c
Stages All ... equivalent to "git add .; git add -u"
	git add -A
Stages new and modified, without deleted
	git add .
Stages modified and deleted, without new
	git add -u
Checkout a tag
	git checkout gitdemos-1.2.4
Checkout tag into a new branch
	git checkout -b oklaoma-gitdemos-0.3 oklaoma-gitdemos-0.3
Create a patch between two tags
	git diff gitdemos-1.2.4..gitdemos-1.2.5 > ../linux-2.6.35-gitdemos-1.2.4-1.2.5.patch
Unstage all added files to the index
	git reset HEAD .
List all commits containing changes of a specific file (history of a file)
	git log --oneline arch/arm/mach-gitdemos/gitdemos_devel_board.c
List graph of all commit containing changes of a file
	git log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative arch/arm/mach-gitdemos/gitdemos_devel_board.c
Undo changes (revert) of a file un-stagged
	git checkout arch/arm/mach-gitdemos/clock.c
Display simplified git status
	git status -s
Remove untracked files and directory together with ignored one. Replace -f with -n to test the command
	git clean -f -d -x
Delete last commit (uncommit) still not pushed
	git reset --hard HEAD~1
Uncommit latest commits still not pushed (loosing the history)
	git reset --hard HEAD~
Merge a branch squashing its commits into ready-to-be-committed changes
	git merge --squash branch-temp-oklaomaab-build-parameters
Delete branch merged using --squash parameter
	git branch -D branch-temp-oklaomaab-build-parameters
List all files filtered by Git
	git ls-files --other
List files ignored by Git
	git ls-files --other --ignored --exclude-standard
Clone a local Git repository
	git clone ../oklaoma_hybrid_gitdemos_0_5/oklaomainux-2.6.35
Fetch a branch
	git fetch origin branch-temp-misc-stub:branch-temp-misc-stub
Display a summary of the changes in the last commit
	git diff -w --stat HEAD~1
Convert a local Git repo into a bare Git repo
	git checkout -b BRANCH_FOR_BARE_REPO_USAGE
Reset file marked for deletion
	git checkout -- arch/arm/configs/oklaoma4_hybrid_platform_gitdemos_devel_board_defconfig
List last committed files
	git diff --name-only HEAD~1..HEAD
Revert to previous committed version of a file
	git checkout HEAD~1 arch/arm/mach-gitdemos/gitdemos_devel_board.c
Merge branch changes with no commit and no fast-forward
	git merge --no-commit --no-ff branch-temp-shared-log-test-libmac
Update tag
	git tag -f -m "oklaoma-gitdemos-0.5" oklaoma-gitdemos-0.5
Export git files into a new destination folder
	git archive master | tar -x -C /path/to/destination/folder
Add a remote to existing git repository
	git remote add --track master origin ssh://gitvcs@192.168.10.1/mnt/devrepos/gitrepos/STMANTA/linux-2.6.35
Delete branch
	git branch -d branch-temp-new-flash-controller-mutex
Create a bare repository (named <repo-name>.git)
	git init --bare $repo
First push from a cloned repo to a bare repo
	git push origin master
Update latest committed message
	git commit --amend -m  "Added example of oklaomainux output into Booting chapter"
Push a new local branch
	git push -u origin branch_dev_wdc
Merge a single file
	git checkout --patch branch_dev_wdc Makefile
Stage change-by-change of a file
	git add --patch clock.c
Create a new branch tracking a remote one without checking-out it
	git branch --track branch_dev_rex origin/branch_dev_rex
Force stagging of a file included in the .gitignore file
	git add -f GitDemos_Watermark_Draft.pdf
Selectivelly discard changes from a file
	git checkout --patch drivers/media/video/gitdemos_camera.c
Amend the author of last commit (new author added in .git/config file)
	git commit --amend --reset-author
Untrack a file, i.e delete from the repo but leave a local copy
	git rm --cached afile.txt
Print staged diffs of a file
	git diff --cached afile.txt
Unstage files ready to be committed leaving changes in the working copy
	git reset --mixed
Customize Git Colors
	Add the following section in ~/.gitconfig
	[color "status"]
		added = green
		changed = red bold
		untracked = magenta bold

	[color "branch"]
		remote = yellow
Get common anchestor commit
	git merge-base <branch1> <branch2>
Show commits which added/removed the function function_name
	git log -Sfunction_name
Show details of a commit; date, long id, author, message, diffs
	git show <commit>
Replace git with http protocol
	git config --global url."https://".insteadOf git://
Save into a stash
	git stash save my_changes
List saved stashes
	git stash list
Show files saved with a stash
	git stash show my_changes
Show differences saved with a stash
	git stash show -p my_changes
Pop saved stash
	git stash pop my_changes
Rename the current branch
	git branch -m my_new_branch_name
Rename a branch
	git branch -m my_current_branch_name my_new_branch_name
Get current branch name
	git rev-parse --abbrev-ref HEAD
Print branch last commit and remote reference
	git branch -vv
List all commits of an author
	git log --oneline --author=walter
List detailed list of branches
	git for-each-ref --format='%(committerdate) %09 %(authorname) %09 %(refname)' | sort -k5n -k2M -k3n -k4n
Compare file between branches
	git diff <branch1> <branch2> -- <file>
Compare file between branches using an external application
	git difftool <branch1> <branch2> -- <file>
Print differences in the last commit
	git diff HEAD~
Use external tool to view differences in the last commit
	git difftool HEAD~
Uncommit latest commits without loosing the history
	git revert --no-commit <sha-1>..HEAD; git commit
Uncommit latest commits still not pushed (loosing the history)
	git reset --hard <sha-1>
Checkout files from another branch
	git checkout <branch> -- <path_of_file>
Locally prune deleted remote objects
	git fetch --prune
Push a new local branch changing the name of the remote branch
	git push -u origin <local_branch_name>:<remote_branch_name>
Stop merge commit while in Vim
	Either remove/comment the message or use the command :cq
List all branches which contains the specified commit
	git branch [-r|-a] --contains <sha>
List files with conflicts
	git diff --name-only --diff-filter=U
Get used credential storage helper
	git config --global credential.helper
Force credential update
	git config credential.helper store
Generate patch emails of commits done in a branch
	git format-patch <parent> --stdout
Change old (unpushed) commit message (rebase's reword)
	git rebase -i HEAD~<num_commits_to_the_target_commit>
Clone with temporarly disabled SSL check
	git -c http.sslVerify=false clone http://<git-repo-url>
Disable SSL certificate check per repository
	git config --local http.sslVerify false
Add submodule
	git submodule add <git-url> <submodule-path>
Initialize submodule and update
	git submodule update --init
Update submodule
	git submodule update
Basic format placeholders:
	'%H': commit hash
	'%h': abbreviated commit hash
	'%T': tree hash
	'%t': abbreviated tree hash
	'%P': parent hashes
	'%p': abbreviated parent hashes
	'%an': author name
	'%aN': author name (respecting .mailmap, see git-shortlog[1] or git-blame[1])
	'%ae': author email
	'%aE': author email (respecting .mailmap, see git-shortlog[1] or git-blame[1])
	'%ad': author date (format respects --date= option)
	'%aD': author date, RFC2822 style
	'%ar': author date, relative
	'%at': author date, UNIX timestamp
	'%ai': author date, ISO 8601-like format
	'%aI': author date, strict ISO 8601 format
	'%cn': committer name
	'%cN': committer name (respecting .mailmap, see git-shortlog[1] or git-blame[1])
	'%ce': committer email
	'%cE': committer email (respecting .mailmap, see git-shortlog[1] or git-blame[1])
	'%cd': committer date (format respects --date= option)
	'%cD': committer date, RFC2822 style
	'%cr': committer date, relative
	'%ct': committer date, UNIX timestamp
	'%ci': committer date, ISO 8601-like format
	'%cI': committer date, strict ISO 8601 format
	'%d': ref names, like the --decorate option of git-log[1]
	'%D': ref names without the " (", ")" wrapping.
	'%e': encoding
	'%s': subject
	'%f': sanitized subject line, suitable for a filename
	'%b': body
	'%B': raw body (unwrapped subject and body)
	'%N': commit notes
	'%GG': raw verification message from GPG for a signed commit
	'%G?': show "G" for a good (valid) signature, "B" for a bad signature, "U" for a good signature with unknown validity, "X" for a good signature that has expired, "Y" for a good signature made by an expired key, "R" for a good signature made by a revoked key, "E" if the signature cannot be checked (e.g. missing key) and "N" for no signature
	'%GS': show the name of the signer for a signed commit
	'%GK': show the key used to sign a signed commit
	'%gD': reflog selector, e.g., refs/stash@{1} or refs/stash@{2 minutes ago}; the format follows the rules described for the -g option. The portion before the @ is the refname as given on the command line (so git log -g refs/heads/master would yield refs/heads/master@{0}).
	'%gd': shortened reflog selector; same as %gD, but the refname portion is shortened for human readability (so refs/heads/master becomes just master).
	'%gn': reflog identity name
	'%gN': reflog identity name (respecting .mailmap, see git-shortlog[1] or git-blame[1])
	'%ge': reflog identity email
	'%gE': reflog identity email (respecting .mailmap, see git-shortlog[1] or git-blame[1])
	'%gs': reflog subject
	'%Cred': switch color to red
	'%Cgreen': switch color to green
	'%Cblue': switch color to blue
	'%Creset': reset color
	'%m': left (<), right (>) or boundary (-) mark
	'%n': newline
	'%%': a raw '%'
	'%x00': print a byte from a hex code
